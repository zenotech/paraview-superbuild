# Linux-specific builder configurations and build commands

## Base images

### CentOS
#
# CentOS 8 is the primary deployment platform. This gains us maximum
# compatibility with many Linux distros while also providing easy ways to get
# newer compilers.

.centos8:
    image: "kitware/paraview:ci-superbuild-centos8-20250227"

    variables:
        GIT_SUBMODULE_STRATEGY: none
        LAUNCHER: "scl enable gcc-toolset-10 --"
        GIT_CLONE_PATH: $CI_BUILDS_DIR/gitlab-kitware-sciviz-ci
        CUDACXX: "/usr/local/cuda-12.6/bin/nvcc"

.centos8_shared:
    extends: .centos8

    variables:
        CMAKE_CONFIGURATION: linux_shared

.centos8_static:
    extends: .centos8

    variables:
        CMAKE_CONFIGURATION: linux_static

.fedora38:
    image: "kitware/paraview:ci-superbuild-fedora38-20250220"

    variables:
        GIT_SUBMODULE_STRATEGY: none
        GIT_CLONE_PATH: $CI_BUILDS_DIR/gitlab-kitware-sciviz-ci

.fedora38_shared:
    extends: .fedora38

    variables:
        CMAKE_CONFIGURATION: linux_shared

.fedora38_static:
    extends: .fedora38

    variables:
        CMAKE_CONFIGURATION: linux_static

## Tags

.linux_builder_tags:
    tags:
        - build
        - docker
        - linux-x86_64
        - paraview

.linux_test_tags:
    tags:
        - docker
        - linux-x86_64
        - paraview
        - x11

## Linux-specific scripts

.before_script_linux: &before_script_linux
    - .gitlab/ci/cmake.sh
    - .gitlab/ci/ninja.sh
    - export PATH=$PWD/.gitlab:$PWD/.gitlab/cmake/bin:$PATH
    - cmake --version
    - ninja --version
    # Download Qt
    - cmake -P .gitlab/ci/download_qt6.cmake
    - export CMAKE_PREFIX_PATH=$PWD/.gitlab/qt6
    # `git submodule foreach` does not consider submodules that have not been
    # initialized. So here, we initialize what we can and ignore failure so
    # that we can set up submodules properly later.
    - "$LAUNCHER git submodule update --init --recursive || :"
    - $LAUNCHER git submodule foreach --recursive cmake -P "$PWD/.gitlab/ci/fetch_submodule.cmake"
    - $LAUNCHER git submodule sync --recursive
    - $LAUNCHER git submodule update --init --recursive
    # Checkout paraview to get the paraview commit sha which is used for the CTEST_BUILD_NAME
    - $LAUNCHER .gitlab/ci/checkout_paraview.sh
    - export PARAVIEW_COMMIT_SHA=`$LAUNCHER git -C $CI_PROJECT_DIR/source-paraview rev-parse HEAD`
    - export PARAVIEW_COMMIT_SHORT_SHA=`$LAUNCHER git -C $CI_PROJECT_DIR/source-paraview rev-parse --short HEAD`

.cmake_build_linux:
    stage: build

    script:
        - *before_script_linux
        - .gitlab/ci/sccache.sh
        - export CC=$PWD/.gitlab/shortcuts/gcc
        - export CXX=$PWD/.gitlab/shortcuts/g++
        - sccache --start-server
        - sccache --show-stats
        - "$LAUNCHER ctest -VV -S .gitlab/ci/ctest_configure.cmake"
        - "$LAUNCHER ctest -VV -S .gitlab/ci/ctest_build.cmake"
        - "$LAUNCHER ctest -V --output-on-failure -S .gitlab/ci/ctest_package.cmake"
        - sccache --show-stats

    cache:
        key: linux
        paths:
            # Cache downloaded tarballs.
            - build/downloads/
    interruptible: true

.cmake_test_linux:
    stage: test

    script:
        - *before_script_linux
        - "$LAUNCHER ctest --output-on-failure -V -S .gitlab/ci/ctest_test.cmake"
    interruptible: true
