diff -pur src/components/ospcommon/common.cpp src2/components/ospcommon/common.cpp
--- src/components/ospcommon/common.cpp	2019-07-30 09:29:49.000000000 -0400
+++ src2/components/ospcommon/common.cpp	2019-07-30 09:30:25.000000000 -0400
@@ -75,6 +75,14 @@ namespace ospcommon {
   {
     return LibraryRepository::getInstance()->getSymbol(name);
   }
+  std::string getSymbolsLibrary(const std::string& name)
+  {
+    return LibraryRepository::getInstance()->getSymbolsLibrary(name);
+  }
+  void *getLibrary(const std::string& name)
+  {
+    return LibraryRepository::getInstance()->getLibrary(name);
+  }
 
 } // ::ospcommon
 
diff -pur src/components/ospcommon/common.h src2/components/ospcommon/common.h
--- src/components/ospcommon/common.h	2019-07-30 09:29:49.000000000 -0400
+++ src2/components/ospcommon/common.h	2019-07-30 09:30:25.000000000 -0400
@@ -89,6 +89,8 @@ namespace ospcommon {
   OSPCOMMON_INTERFACE void loadLibrary(const std::string &name);
   OSPCOMMON_INTERFACE void loadDefaultLibrary();
   OSPCOMMON_INTERFACE void *getSymbol(const std::string &name);
+  OSPCOMMON_INTERFACE std::string getSymbolsLibrary(const std::string &name);
+  OSPCOMMON_INTERFACE void *getLibrary(const std::string &name);
 
 #ifdef _WIN32
 #  define osp_snprintf sprintf_s
diff -pur src/components/ospcommon/library.cpp src2/components/ospcommon/library.cpp
--- src/components/ospcommon/library.cpp	2019-07-30 09:29:49.000000000 -0400
+++ src2/components/ospcommon/library.cpp	2019-07-30 09:30:25.000000000 -0400
@@ -316,6 +316,7 @@ namespace ospcommon {
   {
     for (auto &l : repo)
       delete l.second;
+    repo.clear();
   }
 
   void LibraryRepository::add(const std::string &name)
@@ -334,6 +335,20 @@ namespace ospcommon {
 
     return sym;
   }
+  std::string LibraryRepository::getSymbolsLibrary(const std::string &name) const
+  {
+    void *sym = nullptr;
+    std::string rlib = "";
+    for (auto lib = repo.cbegin(); sym == nullptr && lib != repo.end(); ++lib)
+    {
+      sym = lib->second->getSymbol(name);
+      rlib = lib->first;
+    }
+
+    if (sym)
+      return rlib;
+    return "";
+  }
 
   void LibraryRepository::addDefaultLibrary()
   {
@@ -361,6 +376,13 @@ namespace ospcommon {
     repo["ospray"] = new Library(RTLD_DEFAULT);
 #endif
   }
+  void* LibraryRepository::getLibrary(const std::string &name) const
+  {
+    auto lib = repo.find(name);
+    if (lib != repo.end())
+      return lib->second;
+    return nullptr;
+  }
 
   bool LibraryRepository::libraryExists(const std::string &name) const
   {
diff -pur src/components/ospcommon/library.h src2/components/ospcommon/library.h
--- src/components/ospcommon/library.h	2019-07-30 09:29:49.000000000 -0400
+++ src2/components/ospcommon/library.h	2019-07-30 09:30:25.000000000 -0400
@@ -14,6 +14,8 @@
 // limitations under the License.                                           //
 // ======================================================================== //
 
+#pragma once
+
 #include "common.h"
 // std
 #include <map>
@@ -54,10 +56,14 @@ namespace ospcommon {
       /* returns address of a symbol from any library in the repo */
       void* getSymbol(const std::string& sym) const;
 
+      /* returns name of a library in the repo that holds a symbol */
+      std::string getSymbolsLibrary(const std::string& sym) const;
+
       /* add the default library to the repo */
       void addDefaultLibrary();
 
       bool libraryExists(const std::string &name) const;
+      void* getLibrary(const std::string &name) const;
 
     private:
       static std::unique_ptr<LibraryRepository> instance;
diff -pur src/ospray/api/objectFactory.h src2/ospray/api/objectFactory.h
--- src/ospray/api/objectFactory.h	2019-07-30 09:29:49.000000000 -0400
+++ src2/ospray/api/objectFactory.h	2019-07-30 09:30:25.000000000 -0400
@@ -17,6 +17,7 @@
 #pragma once
 
 #include "../common/OSPCommon.h"
+#include "ospcommon/library.h"
 
 #include <map>
 
@@ -31,10 +32,15 @@ namespace ospray {
 
     // Function pointers corresponding to each subtype.
     static std::map<std::string, creationFunctionPointer> symbolRegistry;
+    static std::map<std::string, std::string> symbolsLibRegistry;
+    static std::map<std::string, void* > libRegistry;
     const auto type_string = stringForType(OSP_TYPE);
+    const auto symsLib = symbolsLibRegistry[type];
 
     // Find the creation function for the subtype if not already known.
-    if (symbolRegistry.count(type) == 0) {
+    if (symbolRegistry.count(type) == 0 ||
+	libRegistry[symsLib] != getLibrary(symsLib)) {
+
       postStatusMsg(2) << "#ospray: trying to look up "
                        << type_string << " type '" << type
                        << "' for the first time";
@@ -46,6 +52,10 @@ namespace ospray {
       // Look for the named function.
       symbolRegistry[type] =
           (creationFunctionPointer)getSymbol(creationFunctionName);
+      symbolsLibRegistry[type] =
+          getSymbolsLibrary(creationFunctionName);
+      libRegistry[symbolsLibRegistry[type]] =
+          getLibrary(symbolsLibRegistry[type]);
 
       // The named function may not be found if the requested subtype is not
       // known.
