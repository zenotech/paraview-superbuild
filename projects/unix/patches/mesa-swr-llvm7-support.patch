diff --git a/src/gallium/drivers/swr/rasterizer/codegen/gen_llvm_ir_macros.py b/src/gallium/drivers/swr/rasterizer/codegen/gen_llvm_ir_macros.py
index 2e7f1a88a0..d34e88d1bc 100644
--- a/src/gallium/drivers/swr/rasterizer/codegen/gen_llvm_ir_macros.py
+++ b/src/gallium/drivers/swr/rasterizer/codegen/gen_llvm_ir_macros.py
@@ -57,7 +57,6 @@ intrinsics = [
     ['VHSUBPS',     ['a', 'b'], 'a'],
     ['VPTESTC',     ['a', 'b'], 'mInt32Ty'],
     ['VPTESTZ',     ['a', 'b'], 'mInt32Ty'],
-    ['VFMADDPS',    ['a', 'b', 'c'], 'a'],
     ['VPHADDD',     ['a', 'b'], 'a'],
     ['PDEP32',      ['a', 'b'], 'a'],
     ['RDTSC',       [], 'mInt64Ty'],
@@ -71,6 +70,7 @@ llvm_intrinsics = [
     ['STACKRESTORE', 'stackrestore', ['a'], []],
     ['VMINPS', 'minnum', ['a', 'b'], ['a']],
     ['VMAXPS', 'maxnum', ['a', 'b'], ['a']],
+    ['VFMADDPS', 'fmuladd', ['a', 'b', 'c'], ['a']],
     ['DEBUGTRAP', 'debugtrap', [], []],
     ['POPCNT', 'ctpop', ['a'], ['a']],
     ['LOG2', 'log2', ['a'], ['a']],
diff --git a/src/gallium/drivers/swr/rasterizer/jitter/blend_jit.cpp b/src/gallium/drivers/swr/rasterizer/jitter/blend_jit.cpp
index f89c502db7..d5328c8e4e 100644
--- a/src/gallium/drivers/swr/rasterizer/jitter/blend_jit.cpp
+++ b/src/gallium/drivers/swr/rasterizer/jitter/blend_jit.cpp
@@ -870,7 +870,6 @@ struct BlendJit : public Builder
         passes.add(createCFGSimplificationPass());
         passes.add(createEarlyCSEPass());
         passes.add(createInstructionCombiningPass());
-        passes.add(createInstructionSimplifierPass());
         passes.add(createConstantPropagationPass());
         passes.add(createSCCPPass());
         passes.add(createAggressiveDCEPass());
diff --git a/src/gallium/drivers/swr/rasterizer/jitter/builder_misc.cpp b/src/gallium/drivers/swr/rasterizer/jitter/builder_misc.cpp
index 4116dad443..26d8688f5e 100644
--- a/src/gallium/drivers/swr/rasterizer/jitter/builder_misc.cpp
+++ b/src/gallium/drivers/swr/rasterizer/jitter/builder_misc.cpp
@@ -755,15 +755,8 @@ namespace SwrJit
     Value* Builder::FMADDPS(Value* a, Value* b, Value* c)
     {
         Value* vOut;
-        // use FMADs if available
-        if (JM()->mArch.AVX2())
-        {
-            vOut = VFMADDPS(a, b, c);
-        }
-        else
-        {
-            vOut = FADD(FMUL(a, b), c);
-        }
+        // This maps to LLVM fmuladd intrinsic
+        vOut = VFMADDPS(a, b, c);
         return vOut;
     }

diff --git a/src/gallium/drivers/swr/rasterizer/jitter/fetch_jit.cpp b/src/gallium/drivers/swr/rasterizer/jitter/fetch_jit.cpp
index b4d326ebdc..3ad0fabe81 100644
--- a/src/gallium/drivers/swr/rasterizer/jitter/fetch_jit.cpp
+++ b/src/gallium/drivers/swr/rasterizer/jitter/fetch_jit.cpp
@@ -294,7 +294,6 @@ Function* FetchJit::Create(const FETCH_COMPILE_STATE& fetchState)
     optPasses.add(createCFGSimplificationPass());
     optPasses.add(createEarlyCSEPass());
     optPasses.add(createInstructionCombiningPass());
-    optPasses.add(createInstructionSimplifierPass());
     optPasses.add(createConstantPropagationPass());
     optPasses.add(createSCCPPass());
     optPasses.add(createAggressiveDCEPass());
diff --git a/src/gallium/drivers/swr/rasterizer/jitter/functionpasses/lower_x86.cpp b/src/gallium/drivers/swr/rasterizer/jitter/functionpasses/lower_x86.cpp
index 7605823c04..c34959d35e 100644
--- a/src/gallium/drivers/swr/rasterizer/jitter/functionpasses/lower_x86.cpp
+++ b/src/gallium/drivers/swr/rasterizer/jitter/functionpasses/lower_x86.cpp
@@ -76,7 +76,6 @@ namespace SwrJit
         {"meta.intrinsic.VCVTPS2PH", Intrinsic::x86_vcvtps2ph_256},
         {"meta.intrinsic.VPTESTC", Intrinsic::x86_avx_ptestc_256},
         {"meta.intrinsic.VPTESTZ", Intrinsic::x86_avx_ptestz_256},
-        {"meta.intrinsic.VFMADDPS", Intrinsic::x86_fma_vfmadd_ps_256},
         {"meta.intrinsic.VPHADDD", Intrinsic::x86_avx2_phadd_d},
         {"meta.intrinsic.PDEP32", Intrinsic::x86_bmi_pdep_32},
         {"meta.intrinsic.RDTSC", Intrinsic::x86_rdtsc},
diff --git a/src/gallium/drivers/swr/rasterizer/jitter/streamout_jit.cpp b/src/gallium/drivers/swr/rasterizer/jitter/streamout_jit.cpp
index 8f86af2a4b..11ad36521b 100644
--- a/src/gallium/drivers/swr/rasterizer/jitter/streamout_jit.cpp
+++ b/src/gallium/drivers/swr/rasterizer/jitter/streamout_jit.cpp
@@ -306,7 +306,6 @@ struct StreamOutJit : public Builder
         passes.add(createCFGSimplificationPass());
         passes.add(createEarlyCSEPass());
         passes.add(createInstructionCombiningPass());
-        passes.add(createInstructionSimplifierPass());
         passes.add(createConstantPropagationPass());
         passes.add(createSCCPPass());
         passes.add(createAggressiveDCEPass());
diff -N -u -r mesa-18.2.2.old/src/gallium/drivers/swr/rasterizer/jitter/gen_builder.hpp mesa-18.2.2/src/gallium/drivers/swr/rasterizer/jitter/gen_builder.hpp
--- mesa-18.2.2.old/src/gallium/drivers/swr/rasterizer/jitter/gen_builder.hpp	2018-10-05 06:17:03.000000000 -0400
+++ mesa-18.2.2/src/gallium/drivers/swr/rasterizer/jitter/gen_builder.hpp	1969-12-31 19:00:00.000000000 -0500
@@ -1,1014 +0,0 @@
-//============================================================================
-// Copyright (C) 2014-2017 Intel Corporation.   All Rights Reserved.
-//
-// Permission is hereby granted, free of charge, to any person obtaining a
-// copy of this software and associated documentation files (the "Software"),
-// to deal in the Software without restriction, including without limitation
-// the rights to use, copy, modify, merge, publish, distribute, sublicense,
-// and/or sell copies of the Software, and to permit persons to whom the
-// Software is furnished to do so, subject to the following conditions:
-//
-// The above copyright notice and this permission notice (including the next
-// paragraph) shall be included in all copies or substantial portions of the
-// Software.
-//
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
-// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
-// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
-// IN THE SOFTWARE.
-//
-// @file gen_builder.hpp
-//
-// @brief auto-generated file
-//
-// DO NOT EDIT
-//
-// Generation Command Line:
-//  ./rasterizer/codegen/gen_llvm_ir_macros.py
-//    --input
-//    /usr/lib/llvm-5.0/include/llvm/IR/IRBuilder.h
-//    --output
-//    rasterizer/jitter
-//    --gen_h
-//
-//============================================================================
-// clang-format off
-#pragma once
-
-//============================================================================
-// Auto-generated Builder IR Wrappers
-//============================================================================
-GlobalVariable* GLOBAL_STRING(StringRef Str, const Twine &Name = "", unsigned AddressSpace = 0)
-{
-    return IRB()->CreateGlobalString(Str, Name, AddressSpace);
-}
-
-CallInst* MEMSET(Value *Ptr, Value *Val, uint64_t Size, unsigned Align, bool isVolatile = false, MDNode *TBAATag = nullptr, MDNode *ScopeTag = nullptr, MDNode *NoAliasTag = nullptr)
-{
-    return IRB()->CreateMemSet(Ptr, Val, Size, Align, isVolatile, TBAATag, ScopeTag, NoAliasTag);
-}
-
-CallInst* MEMSET(Value *Ptr, Value *Val, Value *Size, unsigned Align, bool isVolatile = false, MDNode *TBAATag = nullptr, MDNode *ScopeTag = nullptr, MDNode *NoAliasTag = nullptr)
-{
-    return IRB()->CreateMemSet(Ptr, Val, Size, Align, isVolatile, TBAATag, ScopeTag, NoAliasTag);
-}
-
-CallInst* MEMCOPY(Value *Dst, Value *Src, uint64_t Size, unsigned Align, bool isVolatile = false, MDNode *TBAATag = nullptr, MDNode *TBAAStructTag = nullptr, MDNode *ScopeTag = nullptr, MDNode *NoAliasTag = nullptr)
-{
-    return IRB()->CreateMemCpy(Dst, Src, Size, Align, isVolatile, TBAATag, TBAAStructTag, ScopeTag, NoAliasTag);
-}
-
-CallInst* MEMCOPY(Value *Dst, Value *Src, Value *Size, unsigned Align, bool isVolatile = false, MDNode *TBAATag = nullptr, MDNode *TBAAStructTag = nullptr, MDNode *ScopeTag = nullptr, MDNode *NoAliasTag = nullptr)
-{
-    return IRB()->CreateMemCpy(Dst, Src, Size, Align, isVolatile, TBAATag, TBAAStructTag, ScopeTag, NoAliasTag);
-}
-
-CallInst* ELEMENT_UNORDERED_ATOMIC_MEM_CPY(Value *Dst, Value *Src, uint64_t Size, uint32_t ElementSize, MDNode *TBAATag = nullptr, MDNode *TBAAStructTag = nullptr, MDNode *ScopeTag = nullptr, MDNode *NoAliasTag = nullptr)
-{
-    return IRB()->CreateElementUnorderedAtomicMemCpy(Dst, Src, Size, ElementSize, TBAATag, TBAAStructTag, ScopeTag, NoAliasTag);
-}
-
-CallInst* ELEMENT_UNORDERED_ATOMIC_MEM_CPY(Value *Dst, Value *Src, Value *Size, uint32_t ElementSize, MDNode *TBAATag = nullptr, MDNode *TBAAStructTag = nullptr, MDNode *ScopeTag = nullptr, MDNode *NoAliasTag = nullptr)
-{
-    return IRB()->CreateElementUnorderedAtomicMemCpy(Dst, Src, Size, ElementSize, TBAATag, TBAAStructTag, ScopeTag, NoAliasTag);
-}
-
-CallInst* MEMMOVE(Value *Dst, Value *Src, uint64_t Size, unsigned Align, bool isVolatile = false, MDNode *TBAATag = nullptr, MDNode *ScopeTag = nullptr, MDNode *NoAliasTag = nullptr)
-{
-    return IRB()->CreateMemMove(Dst, Src, Size, Align, isVolatile, TBAATag, ScopeTag, NoAliasTag);
-}
-
-CallInst* MEMMOVE(Value *Dst, Value *Src, Value *Size, unsigned Align, bool isVolatile = false, MDNode *TBAATag = nullptr, MDNode *ScopeTag = nullptr, MDNode *NoAliasTag = nullptr)
-{
-    return IRB()->CreateMemMove(Dst, Src, Size, Align, isVolatile, TBAATag, ScopeTag, NoAliasTag);
-}
-
-CallInst* FADD_REDUCE(Value *Acc, Value *Src)
-{
-    return IRB()->CreateFAddReduce(Acc, Src);
-}
-
-CallInst* FMUL_REDUCE(Value *Acc, Value *Src)
-{
-    return IRB()->CreateFMulReduce(Acc, Src);
-}
-
-CallInst* ADD_REDUCE(Value *Src)
-{
-    return IRB()->CreateAddReduce(Src);
-}
-
-CallInst* MUL_REDUCE(Value *Src)
-{
-    return IRB()->CreateMulReduce(Src);
-}
-
-CallInst* AND_REDUCE(Value *Src)
-{
-    return IRB()->CreateAndReduce(Src);
-}
-
-CallInst* OR_REDUCE(Value *Src)
-{
-    return IRB()->CreateOrReduce(Src);
-}
-
-CallInst* XOR_REDUCE(Value *Src)
-{
-    return IRB()->CreateXorReduce(Src);
-}
-
-CallInst* INT_MAX_REDUCE(Value *Src, bool IsSigned = false)
-{
-    return IRB()->CreateIntMaxReduce(Src, IsSigned);
-}
-
-CallInst* INT_MIN_REDUCE(Value *Src, bool IsSigned = false)
-{
-    return IRB()->CreateIntMinReduce(Src, IsSigned);
-}
-
-CallInst* FP_MAX_REDUCE(Value *Src, bool NoNaN = false)
-{
-    return IRB()->CreateFPMaxReduce(Src, NoNaN);
-}
-
-CallInst* FP_MIN_REDUCE(Value *Src, bool NoNaN = false)
-{
-    return IRB()->CreateFPMinReduce(Src, NoNaN);
-}
-
-CallInst* LIFETIME_START(Value *Ptr, ConstantInt *Size = nullptr)
-{
-    return IRB()->CreateLifetimeStart(Ptr, Size);
-}
-
-CallInst* LIFETIME_END(Value *Ptr, ConstantInt *Size = nullptr)
-{
-    return IRB()->CreateLifetimeEnd(Ptr, Size);
-}
-
-CallInst* INVARIANT_START(Value *Ptr, ConstantInt *Size = nullptr)
-{
-    return IRB()->CreateInvariantStart(Ptr, Size);
-}
-
-CallInst* MASKED_STORE(Value *Val, Value *Ptr, unsigned Align, Value *Mask)
-{
-    return IRB()->CreateMaskedStore(Val, Ptr, Align, Mask);
-}
-
-CallInst* MASKED_GATHER(Value *Ptrs, unsigned Align, Value *Mask = nullptr, Value *PassThru = nullptr, const Twine& Name = "")
-{
-    return IRB()->CreateMaskedGather(Ptrs, Align, Mask, PassThru, Name);
-}
-
-CallInst* MASKED_SCATTER(Value *Val, Value *Ptrs, unsigned Align, Value *Mask = nullptr)
-{
-    return IRB()->CreateMaskedScatter(Val, Ptrs, Align, Mask);
-}
-
-CallInst* ASSUMPTION(Value *Cond)
-{
-    return IRB()->CreateAssumption(Cond);
-}
-
-CallInst* GC_STATEPOINT_CALL(uint64_t ID, uint32_t NumPatchBytes, Value *ActualCallee, ArrayRef<Value *> CallArgs, ArrayRef<Value *> DeoptArgs, ArrayRef<Value *> GCArgs, const Twine &Name = "")
-{
-    return IRB()->CreateGCStatepointCall(ID, NumPatchBytes, ActualCallee, CallArgs, DeoptArgs, GCArgs, Name);
-}
-
-CallInst* GC_STATEPOINT_CALL(uint64_t ID, uint32_t NumPatchBytes, Value *ActualCallee, uint32_t Flags, ArrayRef<Use> CallArgs, ArrayRef<Use> TransitionArgs, ArrayRef<Use> DeoptArgs, ArrayRef<Value *> GCArgs, const Twine &Name = "")
-{
-    return IRB()->CreateGCStatepointCall(ID, NumPatchBytes, ActualCallee, Flags, CallArgs, TransitionArgs, DeoptArgs, GCArgs, Name);
-}
-
-CallInst* GC_STATEPOINT_CALL(uint64_t ID, uint32_t NumPatchBytes, Value *ActualCallee, ArrayRef<Use> CallArgs, ArrayRef<Value *> DeoptArgs, ArrayRef<Value *> GCArgs, const Twine &Name = "")
-{
-    return IRB()->CreateGCStatepointCall(ID, NumPatchBytes, ActualCallee, CallArgs, DeoptArgs, GCArgs, Name);
-}
-
-InvokeInst* GC_STATEPOINT_INVOKE(uint64_t ID, uint32_t NumPatchBytes, Value *ActualInvokee, BasicBlock *NormalDest, BasicBlock *UnwindDest, ArrayRef<Value *> InvokeArgs, ArrayRef<Value *> DeoptArgs, ArrayRef<Value *> GCArgs, const Twine &Name = "")
-{
-    return IRB()->CreateGCStatepointInvoke(ID, NumPatchBytes, ActualInvokee, NormalDest, UnwindDest, InvokeArgs, DeoptArgs, GCArgs, Name);
-}
-
-InvokeInst* GC_STATEPOINT_INVOKE(uint64_t ID, uint32_t NumPatchBytes, Value *ActualInvokee, BasicBlock *NormalDest, BasicBlock *UnwindDest, uint32_t Flags, ArrayRef<Use> InvokeArgs, ArrayRef<Use> TransitionArgs, ArrayRef<Use> DeoptArgs, ArrayRef<Value *> GCArgs, const Twine &Name = "")
-{
-    return IRB()->CreateGCStatepointInvoke(ID, NumPatchBytes, ActualInvokee, NormalDest, UnwindDest, Flags, InvokeArgs, TransitionArgs, DeoptArgs, GCArgs, Name);
-}
-
-InvokeInst* GC_STATEPOINT_INVOKE(uint64_t ID, uint32_t NumPatchBytes, Value *ActualInvokee, BasicBlock *NormalDest, BasicBlock *UnwindDest, ArrayRef<Use> InvokeArgs, ArrayRef<Value *> DeoptArgs, ArrayRef<Value *> GCArgs, const Twine &Name = "")
-{
-    return IRB()->CreateGCStatepointInvoke(ID, NumPatchBytes, ActualInvokee, NormalDest, UnwindDest, InvokeArgs, DeoptArgs, GCArgs, Name);
-}
-
-CallInst* GC_RESULT(Instruction *Statepoint, Type *ResultType, const Twine &Name = "")
-{
-    return IRB()->CreateGCResult(Statepoint, ResultType, Name);
-}
-
-CallInst* GC_RELOCATE(Instruction *Statepoint, int BaseOffset, int DerivedOffset, Type *ResultType, const Twine &Name = "")
-{
-    return IRB()->CreateGCRelocate(Statepoint, BaseOffset, DerivedOffset, ResultType, Name);
-}
-
-CallInst* BINARY_INTRINSIC(Intrinsic::ID ID, Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateBinaryIntrinsic(ID, LHS, RHS, Name);
-}
-
-CallInst* MIN_NUM(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateMinNum(LHS, RHS, Name);
-}
-
-CallInst* MAX_NUM(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateMaxNum(LHS, RHS, Name);
-}
-
-ReturnInst* RET_VOID()
-{
-    return IRB()->CreateRetVoid();
-}
-
-ReturnInst* RET(Value *V)
-{
-    return IRB()->CreateRet(V);
-}
-
-ReturnInst* AGGREGATE_RET(Value *const *retVals, unsigned N)
-{
-    return IRB()->CreateAggregateRet(retVals, N);
-}
-
-BranchInst* BR(BasicBlock *Dest)
-{
-    return IRB()->CreateBr(Dest);
-}
-
-BranchInst* COND_BR(Value *Cond, BasicBlock *True, BasicBlock *False, MDNode *BranchWeights = nullptr, MDNode *Unpredictable = nullptr)
-{
-    return IRB()->CreateCondBr(Cond, True, False, BranchWeights, Unpredictable);
-}
-
-BranchInst* COND_BR(Value *Cond, BasicBlock *True, BasicBlock *False, Instruction *MDSrc)
-{
-    return IRB()->CreateCondBr(Cond, True, False, MDSrc);
-}
-
-SwitchInst* SWITCH(Value *V, BasicBlock *Dest, unsigned NumCases = 10, MDNode *BranchWeights = nullptr, MDNode *Unpredictable = nullptr)
-{
-    return IRB()->CreateSwitch(V, Dest, NumCases, BranchWeights, Unpredictable);
-}
-
-IndirectBrInst* INDIRECT_BR(Value *Addr, unsigned NumDests = 10)
-{
-    return IRB()->CreateIndirectBr(Addr, NumDests);
-}
-
-InvokeInst* INVOKE(Value *Callee, BasicBlock *NormalDest, BasicBlock *UnwindDest, ArrayRef<Value *> Args = None, const Twine &Name = "")
-{
-    return IRB()->CreateInvoke(Callee, NormalDest, UnwindDest, Args, Name);
-}
-
-InvokeInst* INVOKE(Value *Callee, BasicBlock *NormalDest, BasicBlock *UnwindDest, ArrayRef<Value *> Args, ArrayRef<OperandBundleDef> OpBundles, const Twine &Name = "")
-{
-    return IRB()->CreateInvoke(Callee, NormalDest, UnwindDest, Args, OpBundles, Name);
-}
-
-ResumeInst* RESUME(Value *Exn)
-{
-    return IRB()->CreateResume(Exn);
-}
-
-CleanupReturnInst* CLEANUP_RET(CleanupPadInst *CleanupPad, BasicBlock *UnwindBB = nullptr)
-{
-    return IRB()->CreateCleanupRet(CleanupPad, UnwindBB);
-}
-
-CatchSwitchInst* CATCH_SWITCH(Value *ParentPad, BasicBlock *UnwindBB, unsigned NumHandlers, const Twine &Name = "")
-{
-    return IRB()->CreateCatchSwitch(ParentPad, UnwindBB, NumHandlers, Name);
-}
-
-CatchPadInst* CATCH_PAD(Value *ParentPad, ArrayRef<Value *> Args, const Twine &Name = "")
-{
-    return IRB()->CreateCatchPad(ParentPad, Args, Name);
-}
-
-CleanupPadInst* CLEANUP_PAD(Value *ParentPad, ArrayRef<Value *> Args = None, const Twine &Name = "")
-{
-    return IRB()->CreateCleanupPad(ParentPad, Args, Name);
-}
-
-CatchReturnInst* CATCH_RET(CatchPadInst *CatchPad, BasicBlock *BB)
-{
-    return IRB()->CreateCatchRet(CatchPad, BB);
-}
-
-UnreachableInst* UNREACHABLE()
-{
-    return IRB()->CreateUnreachable();
-}
-
-Value* ADD(Value *LHS, Value *RHS, const Twine &Name = "", bool HasNUW = false, bool HasNSW = false)
-{
-    return IRB()->CreateAdd(LHS, RHS, Name, HasNUW, HasNSW);
-}
-
-Value* NSW_ADD(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateNSWAdd(LHS, RHS, Name);
-}
-
-Value* NUW_ADD(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateNUWAdd(LHS, RHS, Name);
-}
-
-Value* FADD(Value *LHS, Value *RHS, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateFAdd(LHS, RHS, Name, FPMathTag);
-}
-
-Value* SUB(Value *LHS, Value *RHS, const Twine &Name = "", bool HasNUW = false, bool HasNSW = false)
-{
-    return IRB()->CreateSub(LHS, RHS, Name, HasNUW, HasNSW);
-}
-
-Value* NSW_SUB(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateNSWSub(LHS, RHS, Name);
-}
-
-Value* NUW_SUB(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateNUWSub(LHS, RHS, Name);
-}
-
-Value* FSUB(Value *LHS, Value *RHS, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateFSub(LHS, RHS, Name, FPMathTag);
-}
-
-Value* MUL(Value *LHS, Value *RHS, const Twine &Name = "", bool HasNUW = false, bool HasNSW = false)
-{
-    return IRB()->CreateMul(LHS, RHS, Name, HasNUW, HasNSW);
-}
-
-Value* NSW_MUL(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateNSWMul(LHS, RHS, Name);
-}
-
-Value* NUW_MUL(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateNUWMul(LHS, RHS, Name);
-}
-
-Value* FMUL(Value *LHS, Value *RHS, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateFMul(LHS, RHS, Name, FPMathTag);
-}
-
-Value* UDIV(Value *LHS, Value *RHS, const Twine &Name = "", bool isExact = false)
-{
-    return IRB()->CreateUDiv(LHS, RHS, Name, isExact);
-}
-
-Value* EXACT_U_DIV(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateExactUDiv(LHS, RHS, Name);
-}
-
-Value* SDIV(Value *LHS, Value *RHS, const Twine &Name = "", bool isExact = false)
-{
-    return IRB()->CreateSDiv(LHS, RHS, Name, isExact);
-}
-
-Value* EXACT_S_DIV(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateExactSDiv(LHS, RHS, Name);
-}
-
-Value* FDIV(Value *LHS, Value *RHS, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateFDiv(LHS, RHS, Name, FPMathTag);
-}
-
-Value* UREM(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateURem(LHS, RHS, Name);
-}
-
-Value* SREM(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateSRem(LHS, RHS, Name);
-}
-
-Value* FREM(Value *LHS, Value *RHS, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateFRem(LHS, RHS, Name, FPMathTag);
-}
-
-Value* SHL(Value *LHS, Value *RHS, const Twine &Name = "", bool HasNUW = false, bool HasNSW = false)
-{
-    return IRB()->CreateShl(LHS, RHS, Name, HasNUW, HasNSW);
-}
-
-Value* SHL(Value *LHS, const APInt &RHS, const Twine &Name = "", bool HasNUW = false, bool HasNSW = false)
-{
-    return IRB()->CreateShl(LHS, RHS, Name, HasNUW, HasNSW);
-}
-
-Value* SHL(Value *LHS, uint64_t RHS, const Twine &Name = "", bool HasNUW = false, bool HasNSW = false)
-{
-    return IRB()->CreateShl(LHS, RHS, Name, HasNUW, HasNSW);
-}
-
-Value* LSHR(Value *LHS, Value *RHS, const Twine &Name = "", bool isExact = false)
-{
-    return IRB()->CreateLShr(LHS, RHS, Name, isExact);
-}
-
-Value* LSHR(Value *LHS, const APInt &RHS, const Twine &Name = "", bool isExact = false)
-{
-    return IRB()->CreateLShr(LHS, RHS, Name, isExact);
-}
-
-Value* LSHR(Value *LHS, uint64_t RHS, const Twine &Name = "", bool isExact = false)
-{
-    return IRB()->CreateLShr(LHS, RHS, Name, isExact);
-}
-
-Value* ASHR(Value *LHS, Value *RHS, const Twine &Name = "", bool isExact = false)
-{
-    return IRB()->CreateAShr(LHS, RHS, Name, isExact);
-}
-
-Value* ASHR(Value *LHS, const APInt &RHS, const Twine &Name = "", bool isExact = false)
-{
-    return IRB()->CreateAShr(LHS, RHS, Name, isExact);
-}
-
-Value* ASHR(Value *LHS, uint64_t RHS, const Twine &Name = "", bool isExact = false)
-{
-    return IRB()->CreateAShr(LHS, RHS, Name, isExact);
-}
-
-Value* AND(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateAnd(LHS, RHS, Name);
-}
-
-Value* AND(Value *LHS, const APInt &RHS, const Twine &Name = "")
-{
-    return IRB()->CreateAnd(LHS, RHS, Name);
-}
-
-Value* AND(Value *LHS, uint64_t RHS, const Twine &Name = "")
-{
-    return IRB()->CreateAnd(LHS, RHS, Name);
-}
-
-Value* OR(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateOr(LHS, RHS, Name);
-}
-
-Value* OR(Value *LHS, const APInt &RHS, const Twine &Name = "")
-{
-    return IRB()->CreateOr(LHS, RHS, Name);
-}
-
-Value* OR(Value *LHS, uint64_t RHS, const Twine &Name = "")
-{
-    return IRB()->CreateOr(LHS, RHS, Name);
-}
-
-Value* XOR(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateXor(LHS, RHS, Name);
-}
-
-Value* XOR(Value *LHS, const APInt &RHS, const Twine &Name = "")
-{
-    return IRB()->CreateXor(LHS, RHS, Name);
-}
-
-Value* XOR(Value *LHS, uint64_t RHS, const Twine &Name = "")
-{
-    return IRB()->CreateXor(LHS, RHS, Name);
-}
-
-Value* BINOP(Instruction::BinaryOps Opc, Value *LHS, Value *RHS, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateBinOp(Opc, LHS, RHS, Name, FPMathTag);
-}
-
-Value* NEG(Value *V, const Twine &Name = "", bool HasNUW = false, bool HasNSW = false)
-{
-    return IRB()->CreateNeg(V, Name, HasNUW, HasNSW);
-}
-
-Value* NSW_NEG(Value *V, const Twine &Name = "")
-{
-    return IRB()->CreateNSWNeg(V, Name);
-}
-
-Value* NUW_NEG(Value *V, const Twine &Name = "")
-{
-    return IRB()->CreateNUWNeg(V, Name);
-}
-
-Value* FNEG(Value *V, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateFNeg(V, Name, FPMathTag);
-}
-
-Value* NOT(Value *V, const Twine &Name = "")
-{
-    return IRB()->CreateNot(V, Name);
-}
-
-AllocaInst* ALLOCA(Type *Ty, unsigned AddrSpace, Value *ArraySize = nullptr, const Twine &Name = "")
-{
-    return IRB()->CreateAlloca(Ty, AddrSpace, ArraySize, Name);
-}
-
-AllocaInst* ALLOCA(Type *Ty, Value *ArraySize = nullptr, const Twine &Name = "")
-{
-    return IRB()->CreateAlloca(Ty, ArraySize, Name);
-}
-
-StoreInst* STORE(Value *Val, Value *Ptr, bool isVolatile = false)
-{
-    return IRB()->CreateStore(Val, Ptr, isVolatile);
-}
-
-LoadInst* ALIGNED_LOAD(Value *Ptr, unsigned Align, const char *Name)
-{
-    return IRB()->CreateAlignedLoad(Ptr, Align, Name);
-}
-
-LoadInst* ALIGNED_LOAD(Value *Ptr, unsigned Align, const Twine &Name = "")
-{
-    return IRB()->CreateAlignedLoad(Ptr, Align, Name);
-}
-
-LoadInst* ALIGNED_LOAD(Value *Ptr, unsigned Align, bool isVolatile, const Twine &Name = "")
-{
-    return IRB()->CreateAlignedLoad(Ptr, Align, isVolatile, Name);
-}
-
-StoreInst* ALIGNED_STORE(Value *Val, Value *Ptr, unsigned Align, bool isVolatile = false)
-{
-    return IRB()->CreateAlignedStore(Val, Ptr, Align, isVolatile);
-}
-
-Value* IN_BOUNDS_GEP(Value *Ptr, ArrayRef<Value *> IdxList, const Twine &Name = "")
-{
-    return IRB()->CreateInBoundsGEP(Ptr, IdxList, Name);
-}
-
-Value* IN_BOUNDS_GEP(Type *Ty, Value *Ptr, ArrayRef<Value *> IdxList, const Twine &Name = "")
-{
-    return IRB()->CreateInBoundsGEP(Ty, Ptr, IdxList, Name);
-}
-
-Value* IN_BOUNDS_GEP(Type *Ty, Value *Ptr, Value *Idx, const Twine &Name = "")
-{
-    return IRB()->CreateInBoundsGEP(Ty, Ptr, Idx, Name);
-}
-
-Value* CONST_GEP1_32(Value *Ptr, unsigned Idx0, const Twine &Name = "")
-{
-    return IRB()->CreateConstGEP1_32(Ptr, Idx0, Name);
-}
-
-Value* CONST_GEP1_32(Type *Ty, Value *Ptr, unsigned Idx0, const Twine &Name = "")
-{
-    return IRB()->CreateConstGEP1_32(Ty, Ptr, Idx0, Name);
-}
-
-Value* CONST_IN_BOUNDS_GEP1_32(Type *Ty, Value *Ptr, unsigned Idx0, const Twine &Name = "")
-{
-    return IRB()->CreateConstInBoundsGEP1_32(Ty, Ptr, Idx0, Name);
-}
-
-Value* CONST_GEP2_32(Type *Ty, Value *Ptr, unsigned Idx0, unsigned Idx1, const Twine &Name = "")
-{
-    return IRB()->CreateConstGEP2_32(Ty, Ptr, Idx0, Idx1, Name);
-}
-
-Value* CONST_IN_BOUNDS_GEP2_32(Type *Ty, Value *Ptr, unsigned Idx0, unsigned Idx1, const Twine &Name = "")
-{
-    return IRB()->CreateConstInBoundsGEP2_32(Ty, Ptr, Idx0, Idx1, Name);
-}
-
-Value* CONST_GEP1_64(Value *Ptr, uint64_t Idx0, const Twine &Name = "")
-{
-    return IRB()->CreateConstGEP1_64(Ptr, Idx0, Name);
-}
-
-Value* CONST_IN_BOUNDS_GEP1_64(Value *Ptr, uint64_t Idx0, const Twine &Name = "")
-{
-    return IRB()->CreateConstInBoundsGEP1_64(Ptr, Idx0, Name);
-}
-
-Value* CONST_GEP2_64(Value *Ptr, uint64_t Idx0, uint64_t Idx1, const Twine &Name = "")
-{
-    return IRB()->CreateConstGEP2_64(Ptr, Idx0, Idx1, Name);
-}
-
-Value* CONST_IN_BOUNDS_GEP2_64(Value *Ptr, uint64_t Idx0, uint64_t Idx1, const Twine &Name = "")
-{
-    return IRB()->CreateConstInBoundsGEP2_64(Ptr, Idx0, Idx1, Name);
-}
-
-Value* STRUCT_GEP(Type *Ty, Value *Ptr, unsigned Idx, const Twine &Name = "")
-{
-    return IRB()->CreateStructGEP(Ty, Ptr, Idx, Name);
-}
-
-Value* GLOBAL_STRING_PTR(StringRef Str, const Twine &Name = "", unsigned AddressSpace = 0)
-{
-    return IRB()->CreateGlobalStringPtr(Str, Name, AddressSpace);
-}
-
-Value* TRUNC(Value *V, Type *DestTy, const Twine &Name = "")
-{
-    return IRB()->CreateTrunc(V, DestTy, Name);
-}
-
-Value* Z_EXT(Value *V, Type *DestTy, const Twine &Name = "")
-{
-    return IRB()->CreateZExt(V, DestTy, Name);
-}
-
-Value* S_EXT(Value *V, Type *DestTy, const Twine &Name = "")
-{
-    return IRB()->CreateSExt(V, DestTy, Name);
-}
-
-Value* Z_EXT_OR_TRUNC(Value *V, Type *DestTy, const Twine &Name = "")
-{
-    return IRB()->CreateZExtOrTrunc(V, DestTy, Name);
-}
-
-Value* S_EXT_OR_TRUNC(Value *V, Type *DestTy, const Twine &Name = "")
-{
-    return IRB()->CreateSExtOrTrunc(V, DestTy, Name);
-}
-
-Value* FP_TO_UI(Value *V, Type *DestTy, const Twine &Name = "")
-{
-    return IRB()->CreateFPToUI(V, DestTy, Name);
-}
-
-Value* FP_TO_SI(Value *V, Type *DestTy, const Twine &Name = "")
-{
-    return IRB()->CreateFPToSI(V, DestTy, Name);
-}
-
-Value* UI_TO_FP(Value *V, Type *DestTy, const Twine &Name = "")
-{
-    return IRB()->CreateUIToFP(V, DestTy, Name);
-}
-
-Value* SI_TO_FP(Value *V, Type *DestTy, const Twine &Name = "")
-{
-    return IRB()->CreateSIToFP(V, DestTy, Name);
-}
-
-Value* FP_TRUNC(Value *V, Type *DestTy, const Twine &Name = "")
-{
-    return IRB()->CreateFPTrunc(V, DestTy, Name);
-}
-
-Value* FP_EXT(Value *V, Type *DestTy, const Twine &Name = "")
-{
-    return IRB()->CreateFPExt(V, DestTy, Name);
-}
-
-Value* PTR_TO_INT(Value *V, Type *DestTy, const Twine &Name = "")
-{
-    return IRB()->CreatePtrToInt(V, DestTy, Name);
-}
-
-Value* INT_TO_PTR(Value *V, Type *DestTy, const Twine &Name = "")
-{
-    return IRB()->CreateIntToPtr(V, DestTy, Name);
-}
-
-Value* BITCAST(Value *V, Type *DestTy, const Twine &Name = "")
-{
-    return IRB()->CreateBitCast(V, DestTy, Name);
-}
-
-Value* ADDR_SPACE_CAST(Value *V, Type *DestTy, const Twine &Name = "")
-{
-    return IRB()->CreateAddrSpaceCast(V, DestTy, Name);
-}
-
-Value* Z_EXT_OR_BIT_CAST(Value *V, Type *DestTy, const Twine &Name = "")
-{
-    return IRB()->CreateZExtOrBitCast(V, DestTy, Name);
-}
-
-Value* S_EXT_OR_BIT_CAST(Value *V, Type *DestTy, const Twine &Name = "")
-{
-    return IRB()->CreateSExtOrBitCast(V, DestTy, Name);
-}
-
-Value* TRUNC_OR_BIT_CAST(Value *V, Type *DestTy, const Twine &Name = "")
-{
-    return IRB()->CreateTruncOrBitCast(V, DestTy, Name);
-}
-
-Value* CAST(Instruction::CastOps Op, Value *V, Type *DestTy, const Twine &Name = "")
-{
-    return IRB()->CreateCast(Op, V, DestTy, Name);
-}
-
-Value* POINTER_CAST(Value *V, Type *DestTy, const Twine &Name = "")
-{
-    return IRB()->CreatePointerCast(V, DestTy, Name);
-}
-
-Value* POINTER_BIT_CAST_OR_ADDR_SPACE_CAST(Value *V, Type *DestTy, const Twine &Name = "")
-{
-    return IRB()->CreatePointerBitCastOrAddrSpaceCast(V, DestTy, Name);
-}
-
-Value* INT_CAST(Value *V, Type *DestTy, bool isSigned, const Twine &Name = "")
-{
-    return IRB()->CreateIntCast(V, DestTy, isSigned, Name);
-}
-
-Value* BIT_OR_POINTER_CAST(Value *V, Type *DestTy, const Twine &Name = "")
-{
-    return IRB()->CreateBitOrPointerCast(V, DestTy, Name);
-}
-
-Value* FP_CAST(Value *V, Type *DestTy, const Twine &Name = "")
-{
-    return IRB()->CreateFPCast(V, DestTy, Name);
-}
-
-Value* ICMP_EQ(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateICmpEQ(LHS, RHS, Name);
-}
-
-Value* ICMP_NE(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateICmpNE(LHS, RHS, Name);
-}
-
-Value* ICMP_UGT(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateICmpUGT(LHS, RHS, Name);
-}
-
-Value* ICMP_UGE(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateICmpUGE(LHS, RHS, Name);
-}
-
-Value* ICMP_ULT(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateICmpULT(LHS, RHS, Name);
-}
-
-Value* ICMP_ULE(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateICmpULE(LHS, RHS, Name);
-}
-
-Value* ICMP_SGT(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateICmpSGT(LHS, RHS, Name);
-}
-
-Value* ICMP_SGE(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateICmpSGE(LHS, RHS, Name);
-}
-
-Value* ICMP_SLT(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateICmpSLT(LHS, RHS, Name);
-}
-
-Value* ICMP_SLE(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateICmpSLE(LHS, RHS, Name);
-}
-
-Value* FCMP_OEQ(Value *LHS, Value *RHS, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateFCmpOEQ(LHS, RHS, Name, FPMathTag);
-}
-
-Value* FCMP_OGT(Value *LHS, Value *RHS, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateFCmpOGT(LHS, RHS, Name, FPMathTag);
-}
-
-Value* FCMP_OGE(Value *LHS, Value *RHS, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateFCmpOGE(LHS, RHS, Name, FPMathTag);
-}
-
-Value* FCMP_OLT(Value *LHS, Value *RHS, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateFCmpOLT(LHS, RHS, Name, FPMathTag);
-}
-
-Value* FCMP_OLE(Value *LHS, Value *RHS, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateFCmpOLE(LHS, RHS, Name, FPMathTag);
-}
-
-Value* FCMP_ONE(Value *LHS, Value *RHS, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateFCmpONE(LHS, RHS, Name, FPMathTag);
-}
-
-Value* FCMP_ORD(Value *LHS, Value *RHS, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateFCmpORD(LHS, RHS, Name, FPMathTag);
-}
-
-Value* FCMP_UNO(Value *LHS, Value *RHS, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateFCmpUNO(LHS, RHS, Name, FPMathTag);
-}
-
-Value* FCMP_UEQ(Value *LHS, Value *RHS, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateFCmpUEQ(LHS, RHS, Name, FPMathTag);
-}
-
-Value* FCMP_UGT(Value *LHS, Value *RHS, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateFCmpUGT(LHS, RHS, Name, FPMathTag);
-}
-
-Value* FCMP_UGE(Value *LHS, Value *RHS, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateFCmpUGE(LHS, RHS, Name, FPMathTag);
-}
-
-Value* FCMP_ULT(Value *LHS, Value *RHS, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateFCmpULT(LHS, RHS, Name, FPMathTag);
-}
-
-Value* FCMP_ULE(Value *LHS, Value *RHS, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateFCmpULE(LHS, RHS, Name, FPMathTag);
-}
-
-Value* FCMP_UNE(Value *LHS, Value *RHS, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateFCmpUNE(LHS, RHS, Name, FPMathTag);
-}
-
-Value* ICMP(CmpInst::Predicate P, Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreateICmp(P, LHS, RHS, Name);
-}
-
-Value* FCMP(CmpInst::Predicate P, Value *LHS, Value *RHS, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateFCmp(P, LHS, RHS, Name, FPMathTag);
-}
-
-PHINode* PHI(Type *Ty, unsigned NumReservedValues, const Twine &Name = "")
-{
-    return IRB()->CreatePHI(Ty, NumReservedValues, Name);
-}
-
-CallInst* CALLA(Value *Callee, ArrayRef<Value *> Args = None, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateCall(Callee, Args, Name, FPMathTag);
-}
-
-CallInst* CALLA(FunctionType *FTy, Value *Callee, ArrayRef<Value *> Args, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateCall(FTy, Callee, Args, Name, FPMathTag);
-}
-
-CallInst* CALLA(Value *Callee, ArrayRef<Value *> Args, ArrayRef<OperandBundleDef> OpBundles, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateCall(Callee, Args, OpBundles, Name, FPMathTag);
-}
-
-CallInst* CALLA(Function *Callee, ArrayRef<Value *> Args, const Twine &Name = "", MDNode *FPMathTag = nullptr)
-{
-    return IRB()->CreateCall(Callee, Args, Name, FPMathTag);
-}
-
-Value* SELECT(Value *C, Value *True, Value *False, const Twine &Name = "", Instruction *MDFrom = nullptr)
-{
-    return IRB()->CreateSelect(C, True, False, Name, MDFrom);
-}
-
-VAArgInst* VA_ARG(Value *List, Type *Ty, const Twine &Name = "")
-{
-    return IRB()->CreateVAArg(List, Ty, Name);
-}
-
-Value* VEXTRACT(Value *Vec, Value *Idx, const Twine &Name = "")
-{
-    return IRB()->CreateExtractElement(Vec, Idx, Name);
-}
-
-Value* VEXTRACT(Value *Vec, uint64_t Idx, const Twine &Name = "")
-{
-    return IRB()->CreateExtractElement(Vec, Idx, Name);
-}
-
-Value* VINSERT(Value *Vec, Value *NewElt, Value *Idx, const Twine &Name = "")
-{
-    return IRB()->CreateInsertElement(Vec, NewElt, Idx, Name);
-}
-
-Value* VINSERT(Value *Vec, Value *NewElt, uint64_t Idx, const Twine &Name = "")
-{
-    return IRB()->CreateInsertElement(Vec, NewElt, Idx, Name);
-}
-
-Value* VSHUFFLE(Value *V1, Value *V2, Value *Mask, const Twine &Name = "")
-{
-    return IRB()->CreateShuffleVector(V1, V2, Mask, Name);
-}
-
-Value* VSHUFFLE(Value *V1, Value *V2, ArrayRef<uint32_t> IntMask, const Twine &Name = "")
-{
-    return IRB()->CreateShuffleVector(V1, V2, IntMask, Name);
-}
-
-Value* EXTRACT_VALUE(Value *Agg, ArrayRef<unsigned> Idxs, const Twine &Name = "")
-{
-    return IRB()->CreateExtractValue(Agg, Idxs, Name);
-}
-
-Value* INSERT_VALUE(Value *Agg, Value *Val, ArrayRef<unsigned> Idxs, const Twine &Name = "")
-{
-    return IRB()->CreateInsertValue(Agg, Val, Idxs, Name);
-}
-
-LandingPadInst* LANDING_PAD(Type *Ty, unsigned NumClauses, const Twine &Name = "")
-{
-    return IRB()->CreateLandingPad(Ty, NumClauses, Name);
-}
-
-Value* IS_NULL(Value *Arg, const Twine &Name = "")
-{
-    return IRB()->CreateIsNull(Arg, Name);
-}
-
-Value* IS_NOT_NULL(Value *Arg, const Twine &Name = "")
-{
-    return IRB()->CreateIsNotNull(Arg, Name);
-}
-
-Value* PTR_DIFF(Value *LHS, Value *RHS, const Twine &Name = "")
-{
-    return IRB()->CreatePtrDiff(LHS, RHS, Name);
-}
-
-Value* INVARIANT_GROUP_BARRIER(Value *Ptr)
-{
-    return IRB()->CreateInvariantGroupBarrier(Ptr);
-}
-
-Value* VECTOR_SPLAT(unsigned NumElts, Value *V, const Twine &Name = "")
-{
-    return IRB()->CreateVectorSplat(NumElts, V, Name);
-}
-
-Value* EXTRACT_INTEGER(const DataLayout &DL, Value *From, IntegerType *ExtractedTy, uint64_t Offset, const Twine &Name)
-{
-    return IRB()->CreateExtractInteger(DL, From, ExtractedTy, Offset, Name);
-}
-
-CallInst* ALIGNMENT_ASSUMPTION(const DataLayout &DL, Value *PtrValue, unsigned Alignment, Value *OffsetValue = nullptr)
-{
-    return IRB()->CreateAlignmentAssumption(DL, PtrValue, Alignment, OffsetValue);
-}
-
-CallInst* ALIGNMENT_ASSUMPTION(const DataLayout &DL, Value *PtrValue, Value *Alignment, Value *OffsetValue = nullptr)
-{
-    return IRB()->CreateAlignmentAssumption(DL, PtrValue, Alignment, OffsetValue);
-}
-
-    // clang-format on
diff -N -u -r mesa-18.2.2.old/src/gallium/drivers/swr/rasterizer/jitter/gen_builder_intrin.hpp mesa-18.2.2/src/gallium/drivers/swr/rasterizer/jitter/gen_builder_intrin.hpp
--- mesa-18.2.2.old/src/gallium/drivers/swr/rasterizer/jitter/gen_builder_intrin.hpp	2018-10-05 06:17:02.000000000 -0400
+++ mesa-18.2.2/src/gallium/drivers/swr/rasterizer/jitter/gen_builder_intrin.hpp	1969-12-31 19:00:00.000000000 -0500
@@ -1,140 +0,0 @@
-//============================================================================
-// Copyright (C) 2014-2017 Intel Corporation.   All Rights Reserved.
-//
-// Permission is hereby granted, free of charge, to any person obtaining a
-// copy of this software and associated documentation files (the "Software"),
-// to deal in the Software without restriction, including without limitation
-// the rights to use, copy, modify, merge, publish, distribute, sublicense,
-// and/or sell copies of the Software, and to permit persons to whom the
-// Software is furnished to do so, subject to the following conditions:
-//
-// The above copyright notice and this permission notice (including the next
-// paragraph) shall be included in all copies or substantial portions of the
-// Software.
-//
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
-// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
-// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
-// IN THE SOFTWARE.
-//
-// @file gen_builder_intrin.hpp
-//
-// @brief auto-generated file
-//
-// DO NOT EDIT
-//
-// Generation Command Line:
-//  ./rasterizer/codegen/gen_llvm_ir_macros.py
-//    --output
-//    rasterizer/jitter
-//    --gen_intrin_h
-//
-//============================================================================
-// clang-format off
-#pragma once
-
-//============================================================================
-// Auto-generated llvm intrinsics
-//============================================================================
-Value* CTTZ(Value* a, Value* flag, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 1> args;
-    args.push_back(a->getType());
-    Function* pFunc = Intrinsic::getDeclaration(JM()->mpCurrentModule, Intrinsic::cttz, args);
-    return CALL(pFunc, std::initializer_list<Value*>{a, flag}, name);
-}
-
-Value* CTLZ(Value* a, Value* flag, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 1> args;
-    args.push_back(a->getType());
-    Function* pFunc = Intrinsic::getDeclaration(JM()->mpCurrentModule, Intrinsic::ctlz, args);
-    return CALL(pFunc, std::initializer_list<Value*>{a, flag}, name);
-}
-
-Value* VSQRTPS(Value* a, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 1> args;
-    args.push_back(a->getType());
-    Function* pFunc = Intrinsic::getDeclaration(JM()->mpCurrentModule, Intrinsic::sqrt, args);
-    return CALL(pFunc, std::initializer_list<Value*>{a}, name);
-}
-
-Value* STACKSAVE(const llvm::Twine& name = "")
-{
-    Function* pFunc = Intrinsic::getDeclaration(JM()->mpCurrentModule, Intrinsic::stacksave);
-    return CALL(pFunc, std::initializer_list<Value*>{}, name);
-}
-
-Value* STACKRESTORE(Value* a, const llvm::Twine& name = "")
-{
-    Function* pFunc = Intrinsic::getDeclaration(JM()->mpCurrentModule, Intrinsic::stackrestore);
-    return CALL(pFunc, std::initializer_list<Value*>{a}, name);
-}
-
-Value* VMINPS(Value* a, Value* b, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 1> args;
-    args.push_back(a->getType());
-    Function* pFunc = Intrinsic::getDeclaration(JM()->mpCurrentModule, Intrinsic::minnum, args);
-    return CALL(pFunc, std::initializer_list<Value*>{a, b}, name);
-}
-
-Value* VMAXPS(Value* a, Value* b, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 1> args;
-    args.push_back(a->getType());
-    Function* pFunc = Intrinsic::getDeclaration(JM()->mpCurrentModule, Intrinsic::maxnum, args);
-    return CALL(pFunc, std::initializer_list<Value*>{a, b}, name);
-}
-
-Value* DEBUGTRAP(const llvm::Twine& name = "")
-{
-    Function* pFunc = Intrinsic::getDeclaration(JM()->mpCurrentModule, Intrinsic::debugtrap);
-    return CALL(pFunc, std::initializer_list<Value*>{}, name);
-}
-
-Value* POPCNT(Value* a, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 1> args;
-    args.push_back(a->getType());
-    Function* pFunc = Intrinsic::getDeclaration(JM()->mpCurrentModule, Intrinsic::ctpop, args);
-    return CALL(pFunc, std::initializer_list<Value*>{a}, name);
-}
-
-Value* LOG2(Value* a, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 1> args;
-    args.push_back(a->getType());
-    Function* pFunc = Intrinsic::getDeclaration(JM()->mpCurrentModule, Intrinsic::log2, args);
-    return CALL(pFunc, std::initializer_list<Value*>{a}, name);
-}
-
-Value* FABS(Value* a, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 1> args;
-    args.push_back(a->getType());
-    Function* pFunc = Intrinsic::getDeclaration(JM()->mpCurrentModule, Intrinsic::fabs, args);
-    return CALL(pFunc, std::initializer_list<Value*>{a}, name);
-}
-
-Value* EXP2(Value* a, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 1> args;
-    args.push_back(a->getType());
-    Function* pFunc = Intrinsic::getDeclaration(JM()->mpCurrentModule, Intrinsic::exp2, args);
-    return CALL(pFunc, std::initializer_list<Value*>{a}, name);
-}
-
-Value* POW(Value* a, Value* b, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 1> args;
-    args.push_back(a->getType());
-    Function* pFunc = Intrinsic::getDeclaration(JM()->mpCurrentModule, Intrinsic::pow, args);
-    return CALL(pFunc, std::initializer_list<Value*>{a, b}, name);
-}
-
-    // clang-format on
diff -N -u -r mesa-18.2.2.old/src/gallium/drivers/swr/rasterizer/jitter/gen_builder_meta.hpp mesa-18.2.2/src/gallium/drivers/swr/rasterizer/jitter/gen_builder_meta.hpp
--- mesa-18.2.2.old/src/gallium/drivers/swr/rasterizer/jitter/gen_builder_meta.hpp	2018-10-05 06:17:02.000000000 -0400
+++ mesa-18.2.2/src/gallium/drivers/swr/rasterizer/jitter/gen_builder_meta.hpp	1969-12-31 19:00:00.000000000 -0500
@@ -1,236 +0,0 @@
-//============================================================================
-// Copyright (C) 2014-2017 Intel Corporation.   All Rights Reserved.
-//
-// Permission is hereby granted, free of charge, to any person obtaining a
-// copy of this software and associated documentation files (the "Software"),
-// to deal in the Software without restriction, including without limitation
-// the rights to use, copy, modify, merge, publish, distribute, sublicense,
-// and/or sell copies of the Software, and to permit persons to whom the
-// Software is furnished to do so, subject to the following conditions:
-//
-// The above copyright notice and this permission notice (including the next
-// paragraph) shall be included in all copies or substantial portions of the
-// Software.
-//
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
-// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
-// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
-// IN THE SOFTWARE.
-//
-// @file gen_builder_meta.hpp
-//
-// @brief auto-generated file
-//
-// DO NOT EDIT
-//
-// Generation Command Line:
-//  ./rasterizer/codegen/gen_llvm_ir_macros.py
-//    --output
-//    rasterizer/jitter
-//    --gen_meta_h
-//
-//============================================================================
-// clang-format off
-#pragma once
-
-//============================================================================
-// Auto-generated meta intrinsics
-//============================================================================
-Value* VGATHERPD(Value* src, Value* pBase, Value* indices, Value* mask, Value* scale, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 5> argTypes;
-    argTypes.push_back(src->getType());
-    argTypes.push_back(pBase->getType());
-    argTypes.push_back(indices->getType());
-    argTypes.push_back(mask->getType());
-    argTypes.push_back(scale->getType());
-    FunctionType* pFuncTy = FunctionType::get(src->getType(), argTypes, false);
-    Function* pFunc = cast<Function>(JM()->mpCurrentModule->getOrInsertFunction("meta.intrinsic.VGATHERPD", pFuncTy));
-    return CALL(pFunc, std::initializer_list<Value*>{src, pBase, indices, mask, scale}, name);
-}
-
-Value* VGATHERPS(Value* src, Value* pBase, Value* indices, Value* mask, Value* scale, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 5> argTypes;
-    argTypes.push_back(src->getType());
-    argTypes.push_back(pBase->getType());
-    argTypes.push_back(indices->getType());
-    argTypes.push_back(mask->getType());
-    argTypes.push_back(scale->getType());
-    FunctionType* pFuncTy = FunctionType::get(src->getType(), argTypes, false);
-    Function* pFunc = cast<Function>(JM()->mpCurrentModule->getOrInsertFunction("meta.intrinsic.VGATHERPS", pFuncTy));
-    return CALL(pFunc, std::initializer_list<Value*>{src, pBase, indices, mask, scale}, name);
-}
-
-Value* VGATHERDD(Value* src, Value* pBase, Value* indices, Value* mask, Value* scale, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 5> argTypes;
-    argTypes.push_back(src->getType());
-    argTypes.push_back(pBase->getType());
-    argTypes.push_back(indices->getType());
-    argTypes.push_back(mask->getType());
-    argTypes.push_back(scale->getType());
-    FunctionType* pFuncTy = FunctionType::get(src->getType(), argTypes, false);
-    Function* pFunc = cast<Function>(JM()->mpCurrentModule->getOrInsertFunction("meta.intrinsic.VGATHERDD", pFuncTy));
-    return CALL(pFunc, std::initializer_list<Value*>{src, pBase, indices, mask, scale}, name);
-}
-
-Value* VRCPPS(Value* a, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 1> argTypes;
-    argTypes.push_back(a->getType());
-    FunctionType* pFuncTy = FunctionType::get(a->getType(), argTypes, false);
-    Function* pFunc = cast<Function>(JM()->mpCurrentModule->getOrInsertFunction("meta.intrinsic.VRCPPS", pFuncTy));
-    return CALL(pFunc, std::initializer_list<Value*>{a}, name);
-}
-
-Value* VROUND(Value* a, Value* rounding, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 2> argTypes;
-    argTypes.push_back(a->getType());
-    argTypes.push_back(rounding->getType());
-    FunctionType* pFuncTy = FunctionType::get(a->getType(), argTypes, false);
-    Function* pFunc = cast<Function>(JM()->mpCurrentModule->getOrInsertFunction("meta.intrinsic.VROUND", pFuncTy));
-    return CALL(pFunc, std::initializer_list<Value*>{a, rounding}, name);
-}
-
-Value* BEXTR_32(Value* src, Value* control, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 2> argTypes;
-    argTypes.push_back(src->getType());
-    argTypes.push_back(control->getType());
-    FunctionType* pFuncTy = FunctionType::get(src->getType(), argTypes, false);
-    Function* pFunc = cast<Function>(JM()->mpCurrentModule->getOrInsertFunction("meta.intrinsic.BEXTR_32", pFuncTy));
-    return CALL(pFunc, std::initializer_list<Value*>{src, control}, name);
-}
-
-Value* VPSHUFB(Value* a, Value* b, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 2> argTypes;
-    argTypes.push_back(a->getType());
-    argTypes.push_back(b->getType());
-    FunctionType* pFuncTy = FunctionType::get(a->getType(), argTypes, false);
-    Function* pFunc = cast<Function>(JM()->mpCurrentModule->getOrInsertFunction("meta.intrinsic.VPSHUFB", pFuncTy));
-    return CALL(pFunc, std::initializer_list<Value*>{a, b}, name);
-}
-
-Value* VPERMD(Value* a, Value* idx, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 2> argTypes;
-    argTypes.push_back(a->getType());
-    argTypes.push_back(idx->getType());
-    FunctionType* pFuncTy = FunctionType::get(a->getType(), argTypes, false);
-    Function* pFunc = cast<Function>(JM()->mpCurrentModule->getOrInsertFunction("meta.intrinsic.VPERMD", pFuncTy));
-    return CALL(pFunc, std::initializer_list<Value*>{a, idx}, name);
-}
-
-Value* VPERMPS(Value* idx, Value* a, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 2> argTypes;
-    argTypes.push_back(idx->getType());
-    argTypes.push_back(a->getType());
-    FunctionType* pFuncTy = FunctionType::get(a->getType(), argTypes, false);
-    Function* pFunc = cast<Function>(JM()->mpCurrentModule->getOrInsertFunction("meta.intrinsic.VPERMPS", pFuncTy));
-    return CALL(pFunc, std::initializer_list<Value*>{idx, a}, name);
-}
-
-Value* VCVTPD2PS(Value* a, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 1> argTypes;
-    argTypes.push_back(a->getType());
-    FunctionType* pFuncTy = FunctionType::get(VectorType::get(mFP32Ty, a->getType()->getVectorNumElements()), argTypes, false);
-    Function* pFunc = cast<Function>(JM()->mpCurrentModule->getOrInsertFunction("meta.intrinsic.VCVTPD2PS", pFuncTy));
-    return CALL(pFunc, std::initializer_list<Value*>{a}, name);
-}
-
-Value* VCVTPH2PS(Value* a, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 1> argTypes;
-    argTypes.push_back(a->getType());
-    FunctionType* pFuncTy = FunctionType::get(VectorType::get(mFP32Ty, a->getType()->getVectorNumElements()), argTypes, false);
-    Function* pFunc = cast<Function>(JM()->mpCurrentModule->getOrInsertFunction("meta.intrinsic.VCVTPH2PS", pFuncTy));
-    return CALL(pFunc, std::initializer_list<Value*>{a}, name);
-}
-
-Value* VCVTPS2PH(Value* a, Value* round, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 2> argTypes;
-    argTypes.push_back(a->getType());
-    argTypes.push_back(round->getType());
-    FunctionType* pFuncTy = FunctionType::get(mSimdInt16Ty, argTypes, false);
-    Function* pFunc = cast<Function>(JM()->mpCurrentModule->getOrInsertFunction("meta.intrinsic.VCVTPS2PH", pFuncTy));
-    return CALL(pFunc, std::initializer_list<Value*>{a, round}, name);
-}
-
-Value* VHSUBPS(Value* a, Value* b, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 2> argTypes;
-    argTypes.push_back(a->getType());
-    argTypes.push_back(b->getType());
-    FunctionType* pFuncTy = FunctionType::get(a->getType(), argTypes, false);
-    Function* pFunc = cast<Function>(JM()->mpCurrentModule->getOrInsertFunction("meta.intrinsic.VHSUBPS", pFuncTy));
-    return CALL(pFunc, std::initializer_list<Value*>{a, b}, name);
-}
-
-Value* VPTESTC(Value* a, Value* b, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 2> argTypes;
-    argTypes.push_back(a->getType());
-    argTypes.push_back(b->getType());
-    FunctionType* pFuncTy = FunctionType::get(mInt32Ty, argTypes, false);
-    Function* pFunc = cast<Function>(JM()->mpCurrentModule->getOrInsertFunction("meta.intrinsic.VPTESTC", pFuncTy));
-    return CALL(pFunc, std::initializer_list<Value*>{a, b}, name);
-}
-
-Value* VPTESTZ(Value* a, Value* b, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 2> argTypes;
-    argTypes.push_back(a->getType());
-    argTypes.push_back(b->getType());
-    FunctionType* pFuncTy = FunctionType::get(mInt32Ty, argTypes, false);
-    Function* pFunc = cast<Function>(JM()->mpCurrentModule->getOrInsertFunction("meta.intrinsic.VPTESTZ", pFuncTy));
-    return CALL(pFunc, std::initializer_list<Value*>{a, b}, name);
-}
-
-Value* VFMADDPS(Value* a, Value* b, Value* c, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 3> argTypes;
-    argTypes.push_back(a->getType());
-    argTypes.push_back(b->getType());
-    argTypes.push_back(c->getType());
-    FunctionType* pFuncTy = FunctionType::get(a->getType(), argTypes, false);
-    Function* pFunc = cast<Function>(JM()->mpCurrentModule->getOrInsertFunction("meta.intrinsic.VFMADDPS", pFuncTy));
-    return CALL(pFunc, std::initializer_list<Value*>{a, b, c}, name);
-}
-
-Value* VPHADDD(Value* a, Value* b, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 2> argTypes;
-    argTypes.push_back(a->getType());
-    argTypes.push_back(b->getType());
-    FunctionType* pFuncTy = FunctionType::get(a->getType(), argTypes, false);
-    Function* pFunc = cast<Function>(JM()->mpCurrentModule->getOrInsertFunction("meta.intrinsic.VPHADDD", pFuncTy));
-    return CALL(pFunc, std::initializer_list<Value*>{a, b}, name);
-}
-
-Value* PDEP32(Value* a, Value* b, const llvm::Twine& name = "")
-{
-    SmallVector<Type*, 2> argTypes;
-    argTypes.push_back(a->getType());
-    argTypes.push_back(b->getType());
-    FunctionType* pFuncTy = FunctionType::get(a->getType(), argTypes, false);
-    Function* pFunc = cast<Function>(JM()->mpCurrentModule->getOrInsertFunction("meta.intrinsic.PDEP32", pFuncTy));
-    return CALL(pFunc, std::initializer_list<Value*>{a, b}, name);
-}
-
-Value* RDTSC(const llvm::Twine& name = "")
-{
-    FunctionType* pFuncTy = FunctionType::get(mInt64Ty, {}, false);
-    Function* pFunc = cast<Function>(JM()->mpCurrentModule->getOrInsertFunction("meta.intrinsic.RDTSC", pFuncTy));
-    return CALL(pFunc, std::initializer_list<Value*>{}, name);
-}
-
-    // clang-format on
diff -N -u -r mesa-18.2.2.old/src/gallium/drivers/swr/rasterizer/jitter/gen_state_llvm.h mesa-18.2.2/src/gallium/drivers/swr/rasterizer/jitter/gen_state_llvm.h
--- mesa-18.2.2.old/src/gallium/drivers/swr/rasterizer/jitter/gen_state_llvm.h	2018-10-05 06:17:02.000000000 -0400
+++ mesa-18.2.2/src/gallium/drivers/swr/rasterizer/jitter/gen_state_llvm.h	1969-12-31 19:00:00.000000000 -0500
@@ -1,1899 +0,0 @@
-/****************************************************************************
- * Copyright (C) 2014-2018 Intel Corporation.   All Rights Reserved.
- *
- * Permission is hereby granted, free of charge, to any person obtaining a
- * copy of this software and associated documentation files (the "Software"),
- * to deal in the Software without restriction, including without limitation
- * the rights to use, copy, modify, merge, publish, distribute, sublicense,
- * and/or sell copies of the Software, and to permit persons to whom the
- * Software is furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice (including the next
- * paragraph) shall be included in all copies or substantial portions of the
- * Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
- * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
- * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
- * IN THE SOFTWARE.
- *
- * @file gen_state_llvm.h
- *
- * @brief auto-generated file
- *
- * DO NOT EDIT
- *
- * Generation Command Line:
- *   ./rasterizer/codegen/gen_llvm_types.py
- *     --input
- *     ./rasterizer/core/state.h
- *     --output
- *     rasterizer/jitter/gen_state_llvm.h
- *
- ******************************************************************************/
-// clang-format off
-
-#pragma once
-
-namespace SwrJit
-{
-    using namespace llvm;
-
-    INLINE static StructType* Gen_simdvertex(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("simdvertex");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* attrib */ ArrayType::get(ArrayType::get(VectorType::get(Type::getFloatTy(ctx), 8), 4), SWR_VTX_NUM_SLOTS),
-            };
-
-            pRetType = StructType::create(members, "simdvertex", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("attrib", 201),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "simdvertex", pFile, 199, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t simdvertex_attrib = 0;
-
-    INLINE static StructType* Gen_simd16vertex(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("simd16vertex");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* attrib */ ArrayType::get(ArrayType::get(VectorType::get(Type::getFloatTy(ctx), 16), 4), SWR_VTX_NUM_SLOTS),
-            };
-
-            pRetType = StructType::create(members, "simd16vertex", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("attrib", 207),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "simd16vertex", pFile, 205, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t simd16vertex_attrib = 0;
-
-    INLINE static StructType* Gen_SIMDVERTEX_T(JitManager* pJitMgr)
-    {
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SIMDVERTEX_T");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-            };
-
-            pRetType = StructType::create(members, "SIMDVERTEX_T", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SIMDVERTEX_T", pFile, 213, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-
-    INLINE static StructType* Gen_SWR_SHADER_STATS(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_SHADER_STATS");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* numInstExecuted */ Type::getInt32Ty(ctx),
-            };
-
-            pRetType = StructType::create(members, "SWR_SHADER_STATS", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("numInstExecuted", 224),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_SHADER_STATS", pFile, 222, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_SHADER_STATS_numInstExecuted = 0;
-
-    INLINE static StructType* Gen_SWR_VS_CONTEXT(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_VS_CONTEXT");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* pVin            */ PointerType::get(Gen_simdvertex(pJitMgr), 0),
-                /* pVout           */ PointerType::get(Gen_simdvertex(pJitMgr), 0),
-                /* InstanceID      */ Type::getInt32Ty(ctx),
-                /* VertexID        */ VectorType::get(Type::getInt32Ty(ctx), pJitMgr->mVWidth),
-                /* mask            */ VectorType::get(Type::getInt32Ty(ctx), pJitMgr->mVWidth),
-                /* AlternateOffset */ Type::getInt32Ty(ctx),
-                /* mask16          */ VectorType::get(Type::getInt32Ty(ctx), 16),
-                /* VertexID16      */ VectorType::get(Type::getInt32Ty(ctx), 16),
-                /* stats           */ Gen_SWR_SHADER_STATS(pJitMgr),
-            };
-
-            pRetType = StructType::create(members, "SWR_VS_CONTEXT", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("pVin",            233),
-                std::make_pair("pVout",           234),
-                std::make_pair("InstanceID",      236),
-                std::make_pair("VertexID",        237),
-                std::make_pair("mask",            238),
-                std::make_pair("AlternateOffset", 241),
-                std::make_pair("mask16",          243),
-                std::make_pair("VertexID16",      244),
-                std::make_pair("stats",           246),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_VS_CONTEXT", pFile, 231, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_VS_CONTEXT_pVin            = 0;
-    static const uint32_t SWR_VS_CONTEXT_pVout           = 1;
-    static const uint32_t SWR_VS_CONTEXT_InstanceID      = 2;
-    static const uint32_t SWR_VS_CONTEXT_VertexID        = 3;
-    static const uint32_t SWR_VS_CONTEXT_mask            = 4;
-    static const uint32_t SWR_VS_CONTEXT_AlternateOffset = 5;
-    static const uint32_t SWR_VS_CONTEXT_mask16          = 6;
-    static const uint32_t SWR_VS_CONTEXT_VertexID16      = 7;
-    static const uint32_t SWR_VS_CONTEXT_stats           = 8;
-
-    INLINE static StructType* Gen_ScalarAttrib(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("ScalarAttrib");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* x */ Type::getFloatTy(ctx),
-                /* y */ Type::getFloatTy(ctx),
-                /* z */ Type::getFloatTy(ctx),
-                /* w */ Type::getFloatTy(ctx),
-            };
-
-            pRetType = StructType::create(members, "ScalarAttrib", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("x", 256),
-                std::make_pair("y", 257),
-                std::make_pair("z", 258),
-                std::make_pair("w", 259),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "ScalarAttrib", pFile, 254, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t ScalarAttrib_x = 0;
-    static const uint32_t ScalarAttrib_y = 1;
-    static const uint32_t ScalarAttrib_z = 2;
-    static const uint32_t ScalarAttrib_w = 3;
-
-    INLINE static StructType* Gen_ScalarCPoint(JitManager* pJitMgr)
-    {
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("ScalarCPoint");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* attrib */ ArrayType::get(Gen_ScalarAttrib(pJitMgr), SWR_VTX_NUM_SLOTS),
-            };
-
-            pRetType = StructType::create(members, "ScalarCPoint", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("attrib", 264),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "ScalarCPoint", pFile, 262, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t ScalarCPoint_attrib = 0;
-
-    INLINE static StructType* Gen_SWR_TESSELLATION_FACTORS(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_TESSELLATION_FACTORS");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* OuterTessFactors */ ArrayType::get(Type::getFloatTy(ctx), SWR_NUM_OUTER_TESS_FACTORS),
-                /* InnerTessFactors */ ArrayType::get(Type::getFloatTy(ctx), SWR_NUM_INNER_TESS_FACTORS),
-            };
-
-            pRetType = StructType::create(members, "SWR_TESSELLATION_FACTORS", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("OuterTessFactors", 273),
-                std::make_pair("InnerTessFactors", 274),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_TESSELLATION_FACTORS", pFile, 271, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_TESSELLATION_FACTORS_OuterTessFactors = 0;
-    static const uint32_t SWR_TESSELLATION_FACTORS_InnerTessFactors = 1;
-
-    INLINE static StructType* Gen_ScalarPatch(JitManager* pJitMgr)
-    {
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("ScalarPatch");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* tessFactors */ Gen_SWR_TESSELLATION_FACTORS(pJitMgr),
-                /* cp          */ ArrayType::get(Gen_ScalarCPoint(pJitMgr), MAX_NUM_VERTS_PER_PRIM),
-                /* patchData   */ Gen_ScalarCPoint(pJitMgr),
-            };
-
-            pRetType = StructType::create(members, "ScalarPatch", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("tessFactors", 280),
-                std::make_pair("cp",          281),
-                std::make_pair("patchData",   282),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "ScalarPatch", pFile, 278, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t ScalarPatch_tessFactors = 0;
-    static const uint32_t ScalarPatch_cp          = 1;
-    static const uint32_t ScalarPatch_patchData   = 2;
-
-    INLINE static StructType* Gen_SWR_HS_CONTEXT(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_HS_CONTEXT");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* vert        */ ArrayType::get(Gen_simdvertex(pJitMgr), MAX_NUM_VERTS_PER_PRIM),
-                /* PrimitiveID */ VectorType::get(Type::getInt32Ty(ctx), pJitMgr->mVWidth),
-                /* mask        */ VectorType::get(Type::getInt32Ty(ctx), pJitMgr->mVWidth),
-                /* pCPout      */ PointerType::get(Gen_ScalarPatch(pJitMgr), 0),
-                /* stats       */ Gen_SWR_SHADER_STATS(pJitMgr),
-            };
-
-            pRetType = StructType::create(members, "SWR_HS_CONTEXT", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("vert",        291),
-                std::make_pair("PrimitiveID", 292),
-                std::make_pair("mask",        293),
-                std::make_pair("pCPout",      294),
-                std::make_pair("stats",       295),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_HS_CONTEXT", pFile, 289, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_HS_CONTEXT_vert        = 0;
-    static const uint32_t SWR_HS_CONTEXT_PrimitiveID = 1;
-    static const uint32_t SWR_HS_CONTEXT_mask        = 2;
-    static const uint32_t SWR_HS_CONTEXT_pCPout      = 3;
-    static const uint32_t SWR_HS_CONTEXT_stats       = 4;
-
-    INLINE static StructType* Gen_SWR_DS_CONTEXT(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_DS_CONTEXT");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* PrimitiveID           */ Type::getInt32Ty(ctx),
-                /* vectorOffset          */ Type::getInt32Ty(ctx),
-                /* vectorStride          */ Type::getInt32Ty(ctx),
-                /* outVertexAttribOffset */ Type::getInt32Ty(ctx),
-                /* pCpIn                 */ PointerType::get(Gen_ScalarPatch(pJitMgr), 0),
-                /* pDomainU              */ PointerType::get(VectorType::get(Type::getFloatTy(ctx), pJitMgr->mVWidth), 0),
-                /* pDomainV              */ PointerType::get(VectorType::get(Type::getFloatTy(ctx), pJitMgr->mVWidth), 0),
-                /* mask                  */ VectorType::get(Type::getInt32Ty(ctx), pJitMgr->mVWidth),
-                /* pOutputData           */ PointerType::get(VectorType::get(Type::getFloatTy(ctx), pJitMgr->mVWidth), 0),
-                /* stats                 */ Gen_SWR_SHADER_STATS(pJitMgr),
-            };
-
-            pRetType = StructType::create(members, "SWR_DS_CONTEXT", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("PrimitiveID",           304),
-                std::make_pair("vectorOffset",          305),
-                std::make_pair("vectorStride",          306),
-                std::make_pair("outVertexAttribOffset", 307),
-                std::make_pair("pCpIn",                 308),
-                std::make_pair("pDomainU",              309),
-                std::make_pair("pDomainV",              310),
-                std::make_pair("mask",                  311),
-                std::make_pair("pOutputData",           312),
-                std::make_pair("stats",                 313),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_DS_CONTEXT", pFile, 302, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_DS_CONTEXT_PrimitiveID           = 0;
-    static const uint32_t SWR_DS_CONTEXT_vectorOffset          = 1;
-    static const uint32_t SWR_DS_CONTEXT_vectorStride          = 2;
-    static const uint32_t SWR_DS_CONTEXT_outVertexAttribOffset = 3;
-    static const uint32_t SWR_DS_CONTEXT_pCpIn                 = 4;
-    static const uint32_t SWR_DS_CONTEXT_pDomainU              = 5;
-    static const uint32_t SWR_DS_CONTEXT_pDomainV              = 6;
-    static const uint32_t SWR_DS_CONTEXT_mask                  = 7;
-    static const uint32_t SWR_DS_CONTEXT_pOutputData           = 8;
-    static const uint32_t SWR_DS_CONTEXT_stats                 = 9;
-
-    INLINE static StructType* Gen_SWR_GS_CONTEXT(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_GS_CONTEXT");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* pVerts          */ PointerType::get(ArrayType::get(VectorType::get(Type::getFloatTy(ctx), 8), 4), 0),
-                /* inputVertStride */ Type::getInt32Ty(ctx),
-                /* PrimitiveID     */ VectorType::get(Type::getInt32Ty(ctx), pJitMgr->mVWidth),
-                /* InstanceID      */ Type::getInt32Ty(ctx),
-                /* mask            */ VectorType::get(Type::getInt32Ty(ctx), pJitMgr->mVWidth),
-                /* pStreams        */ ArrayType::get(PointerType::get(Type::getInt8Ty(ctx), 0), KNOB_SIMD_WIDTH),
-                /* stats           */ Gen_SWR_SHADER_STATS(pJitMgr),
-            };
-
-            pRetType = StructType::create(members, "SWR_GS_CONTEXT", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("pVerts",          322),
-                std::make_pair("inputVertStride", 323),
-                std::make_pair("PrimitiveID",     324),
-                std::make_pair("InstanceID",      325),
-                std::make_pair("mask",            326),
-                std::make_pair("pStreams",        327),
-                std::make_pair("stats",           328),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_GS_CONTEXT", pFile, 320, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_GS_CONTEXT_pVerts          = 0;
-    static const uint32_t SWR_GS_CONTEXT_inputVertStride = 1;
-    static const uint32_t SWR_GS_CONTEXT_PrimitiveID     = 2;
-    static const uint32_t SWR_GS_CONTEXT_InstanceID      = 3;
-    static const uint32_t SWR_GS_CONTEXT_mask            = 4;
-    static const uint32_t SWR_GS_CONTEXT_pStreams        = 5;
-    static const uint32_t SWR_GS_CONTEXT_stats           = 6;
-
-    INLINE static StructType* Gen_PixelPositions(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("PixelPositions");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* UL       */ VectorType::get(Type::getFloatTy(ctx), pJitMgr->mVWidth),
-                /* center   */ VectorType::get(Type::getFloatTy(ctx), pJitMgr->mVWidth),
-                /* sample   */ VectorType::get(Type::getFloatTy(ctx), pJitMgr->mVWidth),
-                /* centroid */ VectorType::get(Type::getFloatTy(ctx), pJitMgr->mVWidth),
-            };
-
-            pRetType = StructType::create(members, "PixelPositions", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("UL",       333),
-                std::make_pair("center",   334),
-                std::make_pair("sample",   335),
-                std::make_pair("centroid", 336),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "PixelPositions", pFile, 331, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t PixelPositions_UL       = 0;
-    static const uint32_t PixelPositions_center   = 1;
-    static const uint32_t PixelPositions_sample   = 2;
-    static const uint32_t PixelPositions_centroid = 3;
-
-    INLINE static StructType* Gen_SWR_PS_CONTEXT(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_PS_CONTEXT");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* vX                     */ Gen_PixelPositions(pJitMgr),
-                /* vY                     */ Gen_PixelPositions(pJitMgr),
-                /* vZ                     */ VectorType::get(Type::getFloatTy(ctx), pJitMgr->mVWidth),
-                /* activeMask             */ VectorType::get(Type::getInt32Ty(ctx), pJitMgr->mVWidth),
-                /* inputMask              */ VectorType::get(Type::getFloatTy(ctx), pJitMgr->mVWidth),
-                /* oMask                  */ VectorType::get(Type::getInt32Ty(ctx), pJitMgr->mVWidth),
-                /* vI                     */ Gen_PixelPositions(pJitMgr),
-                /* vJ                     */ Gen_PixelPositions(pJitMgr),
-                /* vOneOverW              */ Gen_PixelPositions(pJitMgr),
-                /* pAttribs               */ PointerType::get(Type::getFloatTy(ctx), 0),
-                /* pPerspAttribs          */ PointerType::get(Type::getFloatTy(ctx), 0),
-                /* pRecipW                */ PointerType::get(Type::getFloatTy(ctx), 0),
-                /* I                      */ PointerType::get(Type::getFloatTy(ctx), 0),
-                /* J                      */ PointerType::get(Type::getFloatTy(ctx), 0),
-                /* recipDet               */ Type::getFloatTy(ctx),
-                /* pSamplePosX            */ PointerType::get(Type::getFloatTy(ctx), 0),
-                /* pSamplePosY            */ PointerType::get(Type::getFloatTy(ctx), 0),
-                /* shaded                 */ ArrayType::get(ArrayType::get(VectorType::get(Type::getFloatTy(ctx), 8), 4), SWR_NUM_RENDERTARGETS),
-                /* frontFace              */ Type::getInt32Ty(ctx),
-                /* sampleIndex            */ Type::getInt32Ty(ctx),
-                /* renderTargetArrayIndex */ Type::getInt32Ty(ctx),
-                /* rasterizerSampleCount  */ Type::getInt32Ty(ctx),
-                /* pColorBuffer           */ ArrayType::get(PointerType::get(Type::getInt8Ty(ctx), 0), SWR_NUM_RENDERTARGETS),
-                /* stats                  */ Gen_SWR_SHADER_STATS(pJitMgr),
-            };
-
-            pRetType = StructType::create(members, "SWR_PS_CONTEXT", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("vX",                     347),
-                std::make_pair("vY",                     348),
-                std::make_pair("vZ",                     349),
-                std::make_pair("activeMask",             350),
-                std::make_pair("inputMask",              351),
-                std::make_pair("oMask",                  352),
-                std::make_pair("vI",                     354),
-                std::make_pair("vJ",                     355),
-                std::make_pair("vOneOverW",              356),
-                std::make_pair("pAttribs",               358),
-                std::make_pair("pPerspAttribs",          359),
-                std::make_pair("pRecipW",                360),
-                std::make_pair("I",                      361),
-                std::make_pair("J",                      362),
-                std::make_pair("recipDet",               363),
-                std::make_pair("pSamplePosX",            364),
-                std::make_pair("pSamplePosY",            365),
-                std::make_pair("shaded",                 366),
-                std::make_pair("frontFace",              368),
-                std::make_pair("sampleIndex",            369),
-                std::make_pair("renderTargetArrayIndex", 370),
-                std::make_pair("rasterizerSampleCount",  371),
-                std::make_pair("pColorBuffer",           373),
-                std::make_pair("stats",                  375),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_PS_CONTEXT", pFile, 345, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_PS_CONTEXT_vX                     = 0;
-    static const uint32_t SWR_PS_CONTEXT_vY                     = 1;
-    static const uint32_t SWR_PS_CONTEXT_vZ                     = 2;
-    static const uint32_t SWR_PS_CONTEXT_activeMask             = 3;
-    static const uint32_t SWR_PS_CONTEXT_inputMask              = 4;
-    static const uint32_t SWR_PS_CONTEXT_oMask                  = 5;
-    static const uint32_t SWR_PS_CONTEXT_vI                     = 6;
-    static const uint32_t SWR_PS_CONTEXT_vJ                     = 7;
-    static const uint32_t SWR_PS_CONTEXT_vOneOverW              = 8;
-    static const uint32_t SWR_PS_CONTEXT_pAttribs               = 9;
-    static const uint32_t SWR_PS_CONTEXT_pPerspAttribs          = 10;
-    static const uint32_t SWR_PS_CONTEXT_pRecipW                = 11;
-    static const uint32_t SWR_PS_CONTEXT_I                      = 12;
-    static const uint32_t SWR_PS_CONTEXT_J                      = 13;
-    static const uint32_t SWR_PS_CONTEXT_recipDet               = 14;
-    static const uint32_t SWR_PS_CONTEXT_pSamplePosX            = 15;
-    static const uint32_t SWR_PS_CONTEXT_pSamplePosY            = 16;
-    static const uint32_t SWR_PS_CONTEXT_shaded                 = 17;
-    static const uint32_t SWR_PS_CONTEXT_frontFace              = 18;
-    static const uint32_t SWR_PS_CONTEXT_sampleIndex            = 19;
-    static const uint32_t SWR_PS_CONTEXT_renderTargetArrayIndex = 20;
-    static const uint32_t SWR_PS_CONTEXT_rasterizerSampleCount  = 21;
-    static const uint32_t SWR_PS_CONTEXT_pColorBuffer           = 22;
-    static const uint32_t SWR_PS_CONTEXT_stats                  = 23;
-
-    INLINE static StructType* Gen_SWR_CS_CONTEXT(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_CS_CONTEXT");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* tileCounter         */ Type::getInt32Ty(ctx),
-                /* dispatchDims        */ ArrayType::get(Type::getInt32Ty(ctx), 3),
-                /* pTGSM               */ PointerType::get(Type::getInt8Ty(ctx), 0),
-                /* pSpillFillBuffer    */ PointerType::get(Type::getInt8Ty(ctx), 0),
-                /* pScratchSpace       */ PointerType::get(Type::getInt8Ty(ctx), 0),
-                /* scratchSpacePerSimd */ Type::getInt32Ty(ctx),
-                /* stats               */ Gen_SWR_SHADER_STATS(pJitMgr),
-            };
-
-            pRetType = StructType::create(members, "SWR_CS_CONTEXT", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("tileCounter",         404),
-                std::make_pair("dispatchDims",        407),
-                std::make_pair("pTGSM",               409),
-                std::make_pair("pSpillFillBuffer",    410),
-                std::make_pair("pScratchSpace",       411),
-                std::make_pair("scratchSpacePerSimd", 413),
-                std::make_pair("stats",               415),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_CS_CONTEXT", pFile, 382, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_CS_CONTEXT_tileCounter         = 0;
-    static const uint32_t SWR_CS_CONTEXT_dispatchDims        = 1;
-    static const uint32_t SWR_CS_CONTEXT_pTGSM               = 2;
-    static const uint32_t SWR_CS_CONTEXT_pSpillFillBuffer    = 3;
-    static const uint32_t SWR_CS_CONTEXT_pScratchSpace       = 4;
-    static const uint32_t SWR_CS_CONTEXT_scratchSpacePerSimd = 5;
-    static const uint32_t SWR_CS_CONTEXT_stats               = 6;
-
-    INLINE static StructType* Gen_SWR_LOD_OFFSETS(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_LOD_OFFSETS");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* offsets */ ArrayType::get(ArrayType::get(Type::getInt32Ty(ctx), 15), 2),
-            };
-
-            pRetType = StructType::create(members, "SWR_LOD_OFFSETS", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("offsets", 532),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_LOD_OFFSETS", pFile, 530, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_LOD_OFFSETS_offsets = 0;
-
-    INLINE static StructType* Gen_SWR_SURFACE_STATE(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_SURFACE_STATE");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* xpBaseAddress       */ Type::getInt64Ty(ctx),
-                /* type                */ Type::getInt32Ty(ctx),
-                /* format              */ Type::getInt32Ty(ctx),
-                /* width               */ Type::getInt32Ty(ctx),
-                /* height              */ Type::getInt32Ty(ctx),
-                /* depth               */ Type::getInt32Ty(ctx),
-                /* numSamples          */ Type::getInt32Ty(ctx),
-                /* samplePattern       */ Type::getInt32Ty(ctx),
-                /* pitch               */ Type::getInt32Ty(ctx),
-                /* qpitch              */ Type::getInt32Ty(ctx),
-                /* minLod              */ Type::getInt32Ty(ctx),
-                /* maxLod              */ Type::getInt32Ty(ctx),
-                /* resourceMinLod      */ Type::getFloatTy(ctx),
-                /* lod                 */ Type::getInt32Ty(ctx),
-                /* arrayIndex          */ Type::getInt32Ty(ctx),
-                /* tileMode            */ Type::getInt32Ty(ctx),
-                /* halign              */ Type::getInt32Ty(ctx),
-                /* valign              */ Type::getInt32Ty(ctx),
-                /* xOffset             */ Type::getInt32Ty(ctx),
-                /* yOffset             */ Type::getInt32Ty(ctx),
-                /* lodOffsets          */ ArrayType::get(ArrayType::get(Type::getInt32Ty(ctx), 15), 2),
-                /* xpAuxBaseAddress    */ Type::getInt64Ty(ctx),
-                /* auxMode             */ Type::getInt32Ty(ctx),
-                /* bInterleavedSamples */ Type::getInt8Ty(ctx),
-            };
-
-            pRetType = StructType::create(members, "SWR_SURFACE_STATE", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("xpBaseAddress",       540),
-                std::make_pair("type",                541),
-                std::make_pair("format",              542),
-                std::make_pair("width",               543),
-                std::make_pair("height",              544),
-                std::make_pair("depth",               545),
-                std::make_pair("numSamples",          546),
-                std::make_pair("samplePattern",       547),
-                std::make_pair("pitch",               548),
-                std::make_pair("qpitch",              549),
-                std::make_pair("minLod",              550),
-                std::make_pair("maxLod",              551),
-                std::make_pair("resourceMinLod",      552),
-                std::make_pair("lod",                 554),
-                std::make_pair("arrayIndex",          555),
-                std::make_pair("tileMode",            556),
-                std::make_pair("halign",              557),
-                std::make_pair("valign",              558),
-                std::make_pair("xOffset",             559),
-                std::make_pair("yOffset",             560),
-                std::make_pair("lodOffsets",          562),
-                std::make_pair("xpAuxBaseAddress",    564),
-                std::make_pair("auxMode",             565),
-                std::make_pair("bInterleavedSamples", 568),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_SURFACE_STATE", pFile, 538, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_SURFACE_STATE_xpBaseAddress       = 0;
-    static const uint32_t SWR_SURFACE_STATE_type                = 1;
-    static const uint32_t SWR_SURFACE_STATE_format              = 2;
-    static const uint32_t SWR_SURFACE_STATE_width               = 3;
-    static const uint32_t SWR_SURFACE_STATE_height              = 4;
-    static const uint32_t SWR_SURFACE_STATE_depth               = 5;
-    static const uint32_t SWR_SURFACE_STATE_numSamples          = 6;
-    static const uint32_t SWR_SURFACE_STATE_samplePattern       = 7;
-    static const uint32_t SWR_SURFACE_STATE_pitch               = 8;
-    static const uint32_t SWR_SURFACE_STATE_qpitch              = 9;
-    static const uint32_t SWR_SURFACE_STATE_minLod              = 10;
-    static const uint32_t SWR_SURFACE_STATE_maxLod              = 11;
-    static const uint32_t SWR_SURFACE_STATE_resourceMinLod      = 12;
-    static const uint32_t SWR_SURFACE_STATE_lod                 = 13;
-    static const uint32_t SWR_SURFACE_STATE_arrayIndex          = 14;
-    static const uint32_t SWR_SURFACE_STATE_tileMode            = 15;
-    static const uint32_t SWR_SURFACE_STATE_halign              = 16;
-    static const uint32_t SWR_SURFACE_STATE_valign              = 17;
-    static const uint32_t SWR_SURFACE_STATE_xOffset             = 18;
-    static const uint32_t SWR_SURFACE_STATE_yOffset             = 19;
-    static const uint32_t SWR_SURFACE_STATE_lodOffsets          = 20;
-    static const uint32_t SWR_SURFACE_STATE_xpAuxBaseAddress    = 21;
-    static const uint32_t SWR_SURFACE_STATE_auxMode             = 22;
-    static const uint32_t SWR_SURFACE_STATE_bInterleavedSamples = 23;
-
-    INLINE static StructType* Gen_SWR_VERTEX_BUFFER_STATE(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_VERTEX_BUFFER_STATE");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* xpData              */ Type::getInt64Ty(ctx),
-                /* index               */ Type::getInt32Ty(ctx),
-                /* pitch               */ Type::getInt32Ty(ctx),
-                /* size                */ Type::getInt32Ty(ctx),
-                /* minVertex           */ Type::getInt32Ty(ctx),
-                /* maxVertex           */ Type::getInt32Ty(ctx),
-                /* partialInboundsSize */ Type::getInt32Ty(ctx),
-            };
-
-            pRetType = StructType::create(members, "SWR_VERTEX_BUFFER_STATE", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("xpData",              576),
-                std::make_pair("index",               577),
-                std::make_pair("pitch",               578),
-                std::make_pair("size",                579),
-                std::make_pair("minVertex",           580),
-                std::make_pair("maxVertex",           581),
-                std::make_pair("partialInboundsSize", 582),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_VERTEX_BUFFER_STATE", pFile, 574, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_VERTEX_BUFFER_STATE_xpData              = 0;
-    static const uint32_t SWR_VERTEX_BUFFER_STATE_index               = 1;
-    static const uint32_t SWR_VERTEX_BUFFER_STATE_pitch               = 2;
-    static const uint32_t SWR_VERTEX_BUFFER_STATE_size                = 3;
-    static const uint32_t SWR_VERTEX_BUFFER_STATE_minVertex           = 4;
-    static const uint32_t SWR_VERTEX_BUFFER_STATE_maxVertex           = 5;
-    static const uint32_t SWR_VERTEX_BUFFER_STATE_partialInboundsSize = 6;
-
-    INLINE static StructType* Gen_SWR_INDEX_BUFFER_STATE(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_INDEX_BUFFER_STATE");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* xpIndices */ Type::getInt64Ty(ctx),
-                /* format    */ Type::getInt32Ty(ctx),
-                /* size      */ Type::getInt32Ty(ctx),
-            };
-
-            pRetType = StructType::create(members, "SWR_INDEX_BUFFER_STATE", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("xpIndices", 588),
-                std::make_pair("format",    590),
-                std::make_pair("size",      591),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_INDEX_BUFFER_STATE", pFile, 586, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_INDEX_BUFFER_STATE_xpIndices = 0;
-    static const uint32_t SWR_INDEX_BUFFER_STATE_format    = 1;
-    static const uint32_t SWR_INDEX_BUFFER_STATE_size      = 2;
-
-    INLINE static StructType* Gen_SWR_FETCH_CONTEXT(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_FETCH_CONTEXT");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* pStreams      */ PointerType::get(Gen_SWR_VERTEX_BUFFER_STATE(pJitMgr), 0),
-                /* xpIndices     */ Type::getInt64Ty(ctx),
-                /* xpLastIndex   */ Type::getInt64Ty(ctx),
-                /* CurInstance   */ Type::getInt32Ty(ctx),
-                /* BaseVertex    */ Type::getInt32Ty(ctx),
-                /* StartVertex   */ Type::getInt32Ty(ctx),
-                /* StartInstance */ Type::getInt32Ty(ctx),
-                /* VertexID      */ VectorType::get(Type::getInt32Ty(ctx), pJitMgr->mVWidth),
-                /* CutMask       */ VectorType::get(Type::getInt32Ty(ctx), pJitMgr->mVWidth),
-                /* VertexID2     */ VectorType::get(Type::getInt32Ty(ctx), pJitMgr->mVWidth),
-                /* CutMask2      */ VectorType::get(Type::getInt32Ty(ctx), pJitMgr->mVWidth),
-            };
-
-            pRetType = StructType::create(members, "SWR_FETCH_CONTEXT", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("pStreams",      602),
-                std::make_pair("xpIndices",     603),
-                std::make_pair("xpLastIndex",   604),
-                std::make_pair("CurInstance",   605),
-                std::make_pair("BaseVertex",    606),
-                std::make_pair("StartVertex",   607),
-                std::make_pair("StartInstance", 608),
-                std::make_pair("VertexID",      609),
-                std::make_pair("CutMask",       610),
-                std::make_pair("VertexID2",     615),
-                std::make_pair("CutMask2",      616),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_FETCH_CONTEXT", pFile, 600, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_FETCH_CONTEXT_pStreams      = 0;
-    static const uint32_t SWR_FETCH_CONTEXT_xpIndices     = 1;
-    static const uint32_t SWR_FETCH_CONTEXT_xpLastIndex   = 2;
-    static const uint32_t SWR_FETCH_CONTEXT_CurInstance   = 3;
-    static const uint32_t SWR_FETCH_CONTEXT_BaseVertex    = 4;
-    static const uint32_t SWR_FETCH_CONTEXT_StartVertex   = 5;
-    static const uint32_t SWR_FETCH_CONTEXT_StartInstance = 6;
-    static const uint32_t SWR_FETCH_CONTEXT_VertexID      = 7;
-    static const uint32_t SWR_FETCH_CONTEXT_CutMask       = 8;
-    static const uint32_t SWR_FETCH_CONTEXT_VertexID2     = 9;
-    static const uint32_t SWR_FETCH_CONTEXT_CutMask2      = 10;
-
-    INLINE static StructType* Gen_SWR_STREAMOUT_BUFFER(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_STREAMOUT_BUFFER");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* pBuffer       */ PointerType::get(Type::getInt32Ty(ctx), 0),
-                /* pWriteOffset  */ PointerType::get(Type::getInt32Ty(ctx), 0),
-                /* enable        */ Type::getInt8Ty(ctx),
-                /* soWriteEnable */ Type::getInt8Ty(ctx),
-                /* bufferSize    */ Type::getInt32Ty(ctx),
-                /* pitch         */ Type::getInt32Ty(ctx),
-                /* streamOffset  */ Type::getInt32Ty(ctx),
-            };
-
-            pRetType = StructType::create(members, "SWR_STREAMOUT_BUFFER", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("pBuffer",       670),
-                std::make_pair("pWriteOffset",  673),
-                std::make_pair("enable",        675),
-                std::make_pair("soWriteEnable", 676),
-                std::make_pair("bufferSize",    679),
-                std::make_pair("pitch",         682),
-                std::make_pair("streamOffset",  685),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_STREAMOUT_BUFFER", pFile, 667, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_STREAMOUT_BUFFER_pBuffer       = 0;
-    static const uint32_t SWR_STREAMOUT_BUFFER_pWriteOffset  = 1;
-    static const uint32_t SWR_STREAMOUT_BUFFER_enable        = 2;
-    static const uint32_t SWR_STREAMOUT_BUFFER_soWriteEnable = 3;
-    static const uint32_t SWR_STREAMOUT_BUFFER_bufferSize    = 4;
-    static const uint32_t SWR_STREAMOUT_BUFFER_pitch         = 5;
-    static const uint32_t SWR_STREAMOUT_BUFFER_streamOffset  = 6;
-
-    INLINE static StructType* Gen_SWR_STREAMOUT_STATE(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_STREAMOUT_STATE");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* soEnable           */ Type::getInt8Ty(ctx),
-                /* streamEnable       */ ArrayType::get(Type::getInt8Ty(ctx), MAX_SO_STREAMS),
-                /* rasterizerDisable  */ Type::getInt8Ty(ctx),
-                /* streamToRasterizer */ Type::getInt32Ty(ctx),
-                /* streamMasks        */ ArrayType::get(Type::getInt64Ty(ctx), MAX_SO_STREAMS),
-                /* streamNumEntries   */ ArrayType::get(Type::getInt32Ty(ctx), MAX_SO_STREAMS),
-                /* vertexAttribOffset */ ArrayType::get(Type::getInt32Ty(ctx), MAX_SO_STREAMS),
-            };
-
-            pRetType = StructType::create(members, "SWR_STREAMOUT_STATE", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("soEnable",           694),
-                std::make_pair("streamEnable",       697),
-                std::make_pair("rasterizerDisable",  700),
-                std::make_pair("streamToRasterizer", 703),
-                std::make_pair("streamMasks",        708),
-                std::make_pair("streamNumEntries",   712),
-                std::make_pair("vertexAttribOffset", 715),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_STREAMOUT_STATE", pFile, 691, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_STREAMOUT_STATE_soEnable           = 0;
-    static const uint32_t SWR_STREAMOUT_STATE_streamEnable       = 1;
-    static const uint32_t SWR_STREAMOUT_STATE_rasterizerDisable  = 2;
-    static const uint32_t SWR_STREAMOUT_STATE_streamToRasterizer = 3;
-    static const uint32_t SWR_STREAMOUT_STATE_streamMasks        = 4;
-    static const uint32_t SWR_STREAMOUT_STATE_streamNumEntries   = 5;
-    static const uint32_t SWR_STREAMOUT_STATE_vertexAttribOffset = 6;
-
-    INLINE static StructType* Gen_SWR_STREAMOUT_CONTEXT(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_STREAMOUT_CONTEXT");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* pPrimData            */ PointerType::get(Type::getInt32Ty(ctx), 0),
-                /* pBuffer              */ ArrayType::get(PointerType::get(Gen_SWR_STREAMOUT_BUFFER(pJitMgr), 0), MAX_SO_STREAMS),
-                /* numPrimsWritten      */ Type::getInt32Ty(ctx),
-                /* numPrimStorageNeeded */ Type::getInt32Ty(ctx),
-            };
-
-            pRetType = StructType::create(members, "SWR_STREAMOUT_CONTEXT", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("pPrimData",            723),
-                std::make_pair("pBuffer",              724),
-                std::make_pair("numPrimsWritten",      727),
-                std::make_pair("numPrimStorageNeeded", 730),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_STREAMOUT_CONTEXT", pFile, 721, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_STREAMOUT_CONTEXT_pPrimData            = 0;
-    static const uint32_t SWR_STREAMOUT_CONTEXT_pBuffer              = 1;
-    static const uint32_t SWR_STREAMOUT_CONTEXT_numPrimsWritten      = 2;
-    static const uint32_t SWR_STREAMOUT_CONTEXT_numPrimStorageNeeded = 3;
-
-    INLINE static StructType* Gen_SWR_GS_STATE(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_GS_STATE");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* gsEnable              */ Type::getInt8Ty(ctx),
-                /* isSingleStream        */ Type::getInt8Ty(ctx),
-                /* numInputAttribs       */ Type::getInt32Ty(ctx),
-                /* inputVertStride       */ Type::getInt32Ty(ctx),
-                /* outputTopology        */ Type::getInt32Ty(ctx),
-                /* maxNumVerts           */ Type::getInt32Ty(ctx),
-                /* instanceCount         */ Type::getInt32Ty(ctx),
-                /* singleStreamID        */ Type::getInt32Ty(ctx),
-                /* allocationSize        */ Type::getInt32Ty(ctx),
-                /* vertexAttribOffset    */ Type::getInt32Ty(ctx),
-                /* srcVertexAttribOffset */ Type::getInt32Ty(ctx),
-                /* controlDataSize       */ Type::getInt32Ty(ctx),
-                /* controlDataOffset     */ Type::getInt32Ty(ctx),
-                /* outputVertexSize      */ Type::getInt32Ty(ctx),
-                /* outputVertexOffset    */ Type::getInt32Ty(ctx),
-                /* staticVertexCount     */ Type::getInt32Ty(ctx),
-                /* pad                   */ Type::getInt32Ty(ctx),
-            };
-
-            pRetType = StructType::create(members, "SWR_GS_STATE", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("gsEnable",              738),
-                std::make_pair("isSingleStream",        743),
-                std::make_pair("numInputAttribs",       747),
-                std::make_pair("inputVertStride",       750),
-                std::make_pair("outputTopology",        753),
-                std::make_pair("maxNumVerts",           756),
-                std::make_pair("instanceCount",         759),
-                std::make_pair("singleStreamID",        763),
-                std::make_pair("allocationSize",        766),
-                std::make_pair("vertexAttribOffset",    770),
-                std::make_pair("srcVertexAttribOffset", 773),
-                std::make_pair("controlDataSize",       778),
-                std::make_pair("controlDataOffset",     781),
-                std::make_pair("outputVertexSize",      784),
-                std::make_pair("outputVertexOffset",    787),
-                std::make_pair("staticVertexCount",     792),
-                std::make_pair("pad",                   794),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_GS_STATE", pFile, 736, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_GS_STATE_gsEnable              = 0;
-    static const uint32_t SWR_GS_STATE_isSingleStream        = 1;
-    static const uint32_t SWR_GS_STATE_numInputAttribs       = 2;
-    static const uint32_t SWR_GS_STATE_inputVertStride       = 3;
-    static const uint32_t SWR_GS_STATE_outputTopology        = 4;
-    static const uint32_t SWR_GS_STATE_maxNumVerts           = 5;
-    static const uint32_t SWR_GS_STATE_instanceCount         = 6;
-    static const uint32_t SWR_GS_STATE_singleStreamID        = 7;
-    static const uint32_t SWR_GS_STATE_allocationSize        = 8;
-    static const uint32_t SWR_GS_STATE_vertexAttribOffset    = 9;
-    static const uint32_t SWR_GS_STATE_srcVertexAttribOffset = 10;
-    static const uint32_t SWR_GS_STATE_controlDataSize       = 11;
-    static const uint32_t SWR_GS_STATE_controlDataOffset     = 12;
-    static const uint32_t SWR_GS_STATE_outputVertexSize      = 13;
-    static const uint32_t SWR_GS_STATE_outputVertexOffset    = 14;
-    static const uint32_t SWR_GS_STATE_staticVertexCount     = 15;
-    static const uint32_t SWR_GS_STATE_pad                   = 16;
-
-    INLINE static StructType* Gen_SWR_TS_STATE(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_TS_STATE");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* tsEnable             */ Type::getInt8Ty(ctx),
-                /* tsOutputTopology     */ Type::getInt32Ty(ctx),
-                /* partitioning         */ Type::getInt32Ty(ctx),
-                /* domain               */ Type::getInt32Ty(ctx),
-                /* postDSTopology       */ Type::getInt32Ty(ctx),
-                /* numHsInputAttribs    */ Type::getInt32Ty(ctx),
-                /* numHsOutputAttribs   */ Type::getInt32Ty(ctx),
-                /* numDsOutputAttribs   */ Type::getInt32Ty(ctx),
-                /* dsAllocationSize     */ Type::getInt32Ty(ctx),
-                /* dsOutVtxAttribOffset */ Type::getInt32Ty(ctx),
-                /* vertexAttribOffset   */ Type::getInt32Ty(ctx),
-            };
-
-            pRetType = StructType::create(members, "SWR_TS_STATE", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("tsEnable",             840),
-                std::make_pair("tsOutputTopology",     842),
-                std::make_pair("partitioning",         843),
-                std::make_pair("domain",               844),
-                std::make_pair("postDSTopology",       846),
-                std::make_pair("numHsInputAttribs",    848),
-                std::make_pair("numHsOutputAttribs",   849),
-                std::make_pair("numDsOutputAttribs",   850),
-                std::make_pair("dsAllocationSize",     851),
-                std::make_pair("dsOutVtxAttribOffset", 852),
-                std::make_pair("vertexAttribOffset",   855),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_TS_STATE", pFile, 838, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_TS_STATE_tsEnable             = 0;
-    static const uint32_t SWR_TS_STATE_tsOutputTopology     = 1;
-    static const uint32_t SWR_TS_STATE_partitioning         = 2;
-    static const uint32_t SWR_TS_STATE_domain               = 3;
-    static const uint32_t SWR_TS_STATE_postDSTopology       = 4;
-    static const uint32_t SWR_TS_STATE_numHsInputAttribs    = 5;
-    static const uint32_t SWR_TS_STATE_numHsOutputAttribs   = 6;
-    static const uint32_t SWR_TS_STATE_numDsOutputAttribs   = 7;
-    static const uint32_t SWR_TS_STATE_dsAllocationSize     = 8;
-    static const uint32_t SWR_TS_STATE_dsOutVtxAttribOffset = 9;
-    static const uint32_t SWR_TS_STATE_vertexAttribOffset   = 10;
-
-    INLINE static StructType* Gen_SWR_RENDER_TARGET_BLEND_STATE(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_RENDER_TARGET_BLEND_STATE");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* writeDisableRed   */ Type::getInt8Ty(ctx),
-                /* writeDisableGreen */ Type::getInt8Ty(ctx),
-                /* writeDisableBlue  */ Type::getInt8Ty(ctx),
-                /* writeDisableAlpha */ Type::getInt8Ty(ctx),
-            };
-
-            pRetType = StructType::create(members, "SWR_RENDER_TARGET_BLEND_STATE", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("writeDisableRed",   861),
-                std::make_pair("writeDisableGreen", 862),
-                std::make_pair("writeDisableBlue",  863),
-                std::make_pair("writeDisableAlpha", 864),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_RENDER_TARGET_BLEND_STATE", pFile, 859, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_RENDER_TARGET_BLEND_STATE_writeDisableRed   = 0;
-    static const uint32_t SWR_RENDER_TARGET_BLEND_STATE_writeDisableGreen = 1;
-    static const uint32_t SWR_RENDER_TARGET_BLEND_STATE_writeDisableBlue  = 2;
-    static const uint32_t SWR_RENDER_TARGET_BLEND_STATE_writeDisableAlpha = 3;
-
-    INLINE static StructType* Gen_SWR_BLEND_STATE(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_BLEND_STATE");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* constantColor      */ ArrayType::get(Type::getFloatTy(ctx), 4),
-                /* alphaTestReference */ Type::getInt32Ty(ctx),
-                /* sampleMask         */ Type::getInt32Ty(ctx),
-                /* sampleCount        */ Type::getInt32Ty(ctx),
-                /* renderTarget       */ ArrayType::get(Gen_SWR_RENDER_TARGET_BLEND_STATE(pJitMgr), SWR_NUM_RENDERTARGETS),
-            };
-
-            pRetType = StructType::create(members, "SWR_BLEND_STATE", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("constantColor",      887),
-                std::make_pair("alphaTestReference", 890),
-                std::make_pair("sampleMask",         891),
-                std::make_pair("sampleCount",        894),
-                std::make_pair("renderTarget",       896),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_BLEND_STATE", pFile, 884, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_BLEND_STATE_constantColor      = 0;
-    static const uint32_t SWR_BLEND_STATE_alphaTestReference = 1;
-    static const uint32_t SWR_BLEND_STATE_sampleMask         = 2;
-    static const uint32_t SWR_BLEND_STATE_sampleCount        = 3;
-    static const uint32_t SWR_BLEND_STATE_renderTarget       = 4;
-
-    INLINE static StructType* Gen_SWR_BLEND_CONTEXT(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_BLEND_CONTEXT");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* pBlendState    */ PointerType::get(Gen_SWR_BLEND_STATE(pJitMgr), 0),
-                /* src            */ PointerType::get(ArrayType::get(VectorType::get(Type::getFloatTy(ctx), 8), 4), 0),
-                /* src1           */ PointerType::get(ArrayType::get(VectorType::get(Type::getFloatTy(ctx), 8), 4), 0),
-                /* src0alpha      */ PointerType::get(ArrayType::get(VectorType::get(Type::getFloatTy(ctx), 8), 4), 0),
-                /* sampleNum      */ Type::getInt32Ty(ctx),
-                /* pDst           */ PointerType::get(ArrayType::get(VectorType::get(Type::getFloatTy(ctx), 8), 4), 0),
-                /* result         */ PointerType::get(ArrayType::get(VectorType::get(Type::getFloatTy(ctx), 8), 4), 0),
-                /* oMask          */ PointerType::get(VectorType::get(Type::getInt32Ty(ctx), pJitMgr->mVWidth), 0),
-                /* pMask          */ PointerType::get(VectorType::get(Type::getInt32Ty(ctx), pJitMgr->mVWidth), 0),
-                /* isAlphaTested  */ Type::getInt32Ty(ctx),
-                /* isAlphaBlended */ Type::getInt32Ty(ctx),
-            };
-
-            pRetType = StructType::create(members, "SWR_BLEND_CONTEXT", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("pBlendState",    902),
-                std::make_pair("src",            903),
-                std::make_pair("src1",           904),
-                std::make_pair("src0alpha",      905),
-                std::make_pair("sampleNum",      906),
-                std::make_pair("pDst",           907),
-                std::make_pair("result",         908),
-                std::make_pair("oMask",          909),
-                std::make_pair("pMask",          910),
-                std::make_pair("isAlphaTested",  911),
-                std::make_pair("isAlphaBlended", 912),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_BLEND_CONTEXT", pFile, 900, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_BLEND_CONTEXT_pBlendState    = 0;
-    static const uint32_t SWR_BLEND_CONTEXT_src            = 1;
-    static const uint32_t SWR_BLEND_CONTEXT_src1           = 2;
-    static const uint32_t SWR_BLEND_CONTEXT_src0alpha      = 3;
-    static const uint32_t SWR_BLEND_CONTEXT_sampleNum      = 4;
-    static const uint32_t SWR_BLEND_CONTEXT_pDst           = 5;
-    static const uint32_t SWR_BLEND_CONTEXT_result         = 6;
-    static const uint32_t SWR_BLEND_CONTEXT_oMask          = 7;
-    static const uint32_t SWR_BLEND_CONTEXT_pMask          = 8;
-    static const uint32_t SWR_BLEND_CONTEXT_isAlphaTested  = 9;
-    static const uint32_t SWR_BLEND_CONTEXT_isAlphaBlended = 10;
-
-    INLINE static StructType* Gen_SWR_FRONTEND_STATE(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_FRONTEND_STATE");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* vpTransformDisable */ Type::getInt8Ty(ctx),
-                /* bEnableCutIndex    */ Type::getInt8Ty(ctx),
-                /* triFan             */ Type::getInt32Ty(ctx),
-                /* lineStripList      */ Type::getInt32Ty(ctx),
-                /* triStripList       */ Type::getInt32Ty(ctx),
-            };
-
-            pRetType = StructType::create(members, "SWR_FRONTEND_STATE", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("vpTransformDisable", 942),
-                std::make_pair("bEnableCutIndex",    943),
-                std::make_pair("triFan",             948),
-                std::make_pair("lineStripList",      949),
-                std::make_pair("triStripList",       950),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_FRONTEND_STATE", pFile, 938, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_FRONTEND_STATE_vpTransformDisable = 0;
-    static const uint32_t SWR_FRONTEND_STATE_bEnableCutIndex    = 1;
-    static const uint32_t SWR_FRONTEND_STATE_triFan             = 2;
-    static const uint32_t SWR_FRONTEND_STATE_lineStripList      = 3;
-    static const uint32_t SWR_FRONTEND_STATE_triStripList       = 4;
-
-    INLINE static StructType* Gen_SWR_VIEWPORT_MATRIX(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_VIEWPORT_MATRIX");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* m00 */ Type::getFloatTy(ctx),
-                /* m11 */ Type::getFloatTy(ctx),
-                /* m22 */ Type::getFloatTy(ctx),
-                /* m30 */ Type::getFloatTy(ctx),
-                /* m31 */ Type::getFloatTy(ctx),
-                /* m32 */ Type::getFloatTy(ctx),
-            };
-
-            pRetType = StructType::create(members, "SWR_VIEWPORT_MATRIX", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("m00", 966),
-                std::make_pair("m11", 967),
-                std::make_pair("m22", 968),
-                std::make_pair("m30", 969),
-                std::make_pair("m31", 970),
-                std::make_pair("m32", 971),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_VIEWPORT_MATRIX", pFile, 964, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_VIEWPORT_MATRIX_m00 = 0;
-    static const uint32_t SWR_VIEWPORT_MATRIX_m11 = 1;
-    static const uint32_t SWR_VIEWPORT_MATRIX_m22 = 2;
-    static const uint32_t SWR_VIEWPORT_MATRIX_m30 = 3;
-    static const uint32_t SWR_VIEWPORT_MATRIX_m31 = 4;
-    static const uint32_t SWR_VIEWPORT_MATRIX_m32 = 5;
-
-    INLINE static StructType* Gen_SWR_VIEWPORT_MATRICES(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_VIEWPORT_MATRICES");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* m00 */ ArrayType::get(Type::getFloatTy(ctx), KNOB_NUM_VIEWPORTS_SCISSORS),
-                /* m11 */ ArrayType::get(Type::getFloatTy(ctx), KNOB_NUM_VIEWPORTS_SCISSORS),
-                /* m22 */ ArrayType::get(Type::getFloatTy(ctx), KNOB_NUM_VIEWPORTS_SCISSORS),
-                /* m30 */ ArrayType::get(Type::getFloatTy(ctx), KNOB_NUM_VIEWPORTS_SCISSORS),
-                /* m31 */ ArrayType::get(Type::getFloatTy(ctx), KNOB_NUM_VIEWPORTS_SCISSORS),
-                /* m32 */ ArrayType::get(Type::getFloatTy(ctx), KNOB_NUM_VIEWPORTS_SCISSORS),
-            };
-
-            pRetType = StructType::create(members, "SWR_VIEWPORT_MATRICES", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("m00", 979),
-                std::make_pair("m11", 980),
-                std::make_pair("m22", 981),
-                std::make_pair("m30", 982),
-                std::make_pair("m31", 983),
-                std::make_pair("m32", 984),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_VIEWPORT_MATRICES", pFile, 977, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_VIEWPORT_MATRICES_m00 = 0;
-    static const uint32_t SWR_VIEWPORT_MATRICES_m11 = 1;
-    static const uint32_t SWR_VIEWPORT_MATRICES_m22 = 2;
-    static const uint32_t SWR_VIEWPORT_MATRICES_m30 = 3;
-    static const uint32_t SWR_VIEWPORT_MATRICES_m31 = 4;
-    static const uint32_t SWR_VIEWPORT_MATRICES_m32 = 5;
-
-    INLINE static StructType* Gen_SWR_VIEWPORT(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_VIEWPORT");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* x      */ Type::getFloatTy(ctx),
-                /* y      */ Type::getFloatTy(ctx),
-                /* width  */ Type::getFloatTy(ctx),
-                /* height */ Type::getFloatTy(ctx),
-                /* minZ   */ Type::getFloatTy(ctx),
-                /* maxZ   */ Type::getFloatTy(ctx),
-            };
-
-            pRetType = StructType::create(members, "SWR_VIEWPORT", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("x",      992),
-                std::make_pair("y",      993),
-                std::make_pair("width",  994),
-                std::make_pair("height", 995),
-                std::make_pair("minZ",   996),
-                std::make_pair("maxZ",   997),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_VIEWPORT", pFile, 990, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_VIEWPORT_x      = 0;
-    static const uint32_t SWR_VIEWPORT_y      = 1;
-    static const uint32_t SWR_VIEWPORT_width  = 2;
-    static const uint32_t SWR_VIEWPORT_height = 3;
-    static const uint32_t SWR_VIEWPORT_minZ   = 4;
-    static const uint32_t SWR_VIEWPORT_maxZ   = 5;
-
-    INLINE static StructType* Gen_SWR_MULTISAMPLE_POS(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_MULTISAMPLE_POS");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* _xi                */ ArrayType::get(Type::getInt32Ty(ctx), SWR_MAX_NUM_MULTISAMPLES),
-                /* _yi                */ ArrayType::get(Type::getInt32Ty(ctx), SWR_MAX_NUM_MULTISAMPLES),
-                /* _x                 */ ArrayType::get(Type::getFloatTy(ctx), SWR_MAX_NUM_MULTISAMPLES),
-                /* _y                 */ ArrayType::get(Type::getFloatTy(ctx), SWR_MAX_NUM_MULTISAMPLES),
-                /* _vXi               */ ArrayType::get(VectorType::get(Type::getInt32Ty(ctx), 4), SWR_MAX_NUM_MULTISAMPLES),
-                /* _vYi               */ ArrayType::get(VectorType::get(Type::getInt32Ty(ctx), 4), SWR_MAX_NUM_MULTISAMPLES),
-                /* _vX                */ ArrayType::get(VectorType::get(Type::getFloatTy(ctx), pJitMgr->mVWidth), SWR_MAX_NUM_MULTISAMPLES),
-                /* _vY                */ ArrayType::get(VectorType::get(Type::getFloatTy(ctx), pJitMgr->mVWidth), SWR_MAX_NUM_MULTISAMPLES),
-                /* tileSampleOffsetsX */ VectorType::get(Type::getInt32Ty(ctx), 4),
-                /* tileSampleOffsetsY */ VectorType::get(Type::getInt32Ty(ctx), 4),
-            };
-
-            pRetType = StructType::create(members, "SWR_MULTISAMPLE_POS", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("_xi",                1061),
-                std::make_pair("_yi",                1062),
-                std::make_pair("_x",                 1063),
-                std::make_pair("_y",                 1064),
-                std::make_pair("_vXi",               1067),
-                std::make_pair("_vYi",               1068),
-                std::make_pair("_vX",                1069),
-                std::make_pair("_vY",                1070),
-                std::make_pair("tileSampleOffsetsX", 1071),
-                std::make_pair("tileSampleOffsetsY", 1072),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_MULTISAMPLE_POS", pFile, 1032, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_MULTISAMPLE_POS__xi                = 0;
-    static const uint32_t SWR_MULTISAMPLE_POS__yi                = 1;
-    static const uint32_t SWR_MULTISAMPLE_POS__x                 = 2;
-    static const uint32_t SWR_MULTISAMPLE_POS__y                 = 3;
-    static const uint32_t SWR_MULTISAMPLE_POS__vXi               = 4;
-    static const uint32_t SWR_MULTISAMPLE_POS__vYi               = 5;
-    static const uint32_t SWR_MULTISAMPLE_POS__vX                = 6;
-    static const uint32_t SWR_MULTISAMPLE_POS__vY                = 7;
-    static const uint32_t SWR_MULTISAMPLE_POS_tileSampleOffsetsX = 8;
-    static const uint32_t SWR_MULTISAMPLE_POS_tileSampleOffsetsY = 9;
-
-    INLINE static StructType* Gen_SWR_RASTSTATE(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_RASTSTATE");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* cullMode             */ Type::getInt32Ty(ctx),
-                /* fillMode             */ Type::getInt32Ty(ctx),
-                /* frontWinding         */ Type::getInt32Ty(ctx),
-                /* scissorEnable        */ Type::getInt32Ty(ctx),
-                /* depthClipEnable      */ Type::getInt32Ty(ctx),
-                /* clipHalfZ            */ Type::getInt32Ty(ctx),
-                /* pointParam           */ Type::getInt32Ty(ctx),
-                /* pointSpriteEnable    */ Type::getInt32Ty(ctx),
-                /* pointSpriteTopOrigin */ Type::getInt32Ty(ctx),
-                /* forcedSampleCount    */ Type::getInt32Ty(ctx),
-                /* pixelOffset          */ Type::getInt32Ty(ctx),
-                /* depthBiasPreAdjusted */ Type::getInt32Ty(ctx),
-                /* conservativeRast     */ Type::getInt32Ty(ctx),
-                /* pointSize            */ Type::getFloatTy(ctx),
-                /* lineWidth            */ Type::getFloatTy(ctx),
-                /* depthBias            */ Type::getFloatTy(ctx),
-                /* slopeScaledDepthBias */ Type::getFloatTy(ctx),
-                /* depthBiasClamp       */ Type::getFloatTy(ctx),
-                /* depthFormat          */ Type::getInt32Ty(ctx),
-                /* sampleCount          */ Type::getInt32Ty(ctx),
-                /* pixelLocation        */ Type::getInt32Ty(ctx),
-                /* samplePositions      */ ArrayType::get(Type::getInt8Ty(ctx), sizeof(SWR_MULTISAMPLE_POS)),
-                /* bIsCenterPattern     */ Type::getInt32Ty(ctx),
-            };
-
-            pRetType = StructType::create(members, "SWR_RASTSTATE", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("cullMode",             1080),
-                std::make_pair("fillMode",             1081),
-                std::make_pair("frontWinding",         1082),
-                std::make_pair("scissorEnable",        1083),
-                std::make_pair("depthClipEnable",      1084),
-                std::make_pair("clipHalfZ",            1085),
-                std::make_pair("pointParam",           1086),
-                std::make_pair("pointSpriteEnable",    1087),
-                std::make_pair("pointSpriteTopOrigin", 1088),
-                std::make_pair("forcedSampleCount",    1089),
-                std::make_pair("pixelOffset",          1090),
-                std::make_pair("depthBiasPreAdjusted", 1091),
-                std::make_pair("conservativeRast",     1092),
-                std::make_pair("pointSize",            1094),
-                std::make_pair("lineWidth",            1095),
-                std::make_pair("depthBias",            1097),
-                std::make_pair("slopeScaledDepthBias", 1098),
-                std::make_pair("depthBiasClamp",       1099),
-                std::make_pair("depthFormat",          1100),
-                std::make_pair("sampleCount",          1103),
-                std::make_pair("pixelLocation",        1104),
-                std::make_pair("samplePositions",      1105),
-                std::make_pair("bIsCenterPattern",     1106),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_RASTSTATE", pFile, 1078, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_RASTSTATE_cullMode             = 0;
-    static const uint32_t SWR_RASTSTATE_fillMode             = 1;
-    static const uint32_t SWR_RASTSTATE_frontWinding         = 2;
-    static const uint32_t SWR_RASTSTATE_scissorEnable        = 3;
-    static const uint32_t SWR_RASTSTATE_depthClipEnable      = 4;
-    static const uint32_t SWR_RASTSTATE_clipHalfZ            = 5;
-    static const uint32_t SWR_RASTSTATE_pointParam           = 6;
-    static const uint32_t SWR_RASTSTATE_pointSpriteEnable    = 7;
-    static const uint32_t SWR_RASTSTATE_pointSpriteTopOrigin = 8;
-    static const uint32_t SWR_RASTSTATE_forcedSampleCount    = 9;
-    static const uint32_t SWR_RASTSTATE_pixelOffset          = 10;
-    static const uint32_t SWR_RASTSTATE_depthBiasPreAdjusted = 11;
-    static const uint32_t SWR_RASTSTATE_conservativeRast     = 12;
-    static const uint32_t SWR_RASTSTATE_pointSize            = 13;
-    static const uint32_t SWR_RASTSTATE_lineWidth            = 14;
-    static const uint32_t SWR_RASTSTATE_depthBias            = 15;
-    static const uint32_t SWR_RASTSTATE_slopeScaledDepthBias = 16;
-    static const uint32_t SWR_RASTSTATE_depthBiasClamp       = 17;
-    static const uint32_t SWR_RASTSTATE_depthFormat          = 18;
-    static const uint32_t SWR_RASTSTATE_sampleCount          = 19;
-    static const uint32_t SWR_RASTSTATE_pixelLocation        = 20;
-    static const uint32_t SWR_RASTSTATE_samplePositions      = 21;
-    static const uint32_t SWR_RASTSTATE_bIsCenterPattern     = 22;
-
-    INLINE static StructType* Gen_SWR_ATTRIB_SWIZZLE(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_ATTRIB_SWIZZLE");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* sourceAttrib          */ Type::getInt16Ty(ctx),
-                /* constantSource        */ Type::getInt16Ty(ctx),
-                /* componentOverrideMask */ Type::getInt16Ty(ctx),
-            };
-
-            pRetType = StructType::create(members, "SWR_ATTRIB_SWIZZLE", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("sourceAttrib",          1120),
-                std::make_pair("constantSource",        1121),
-                std::make_pair("componentOverrideMask", 1122),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_ATTRIB_SWIZZLE", pFile, 1118, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_ATTRIB_SWIZZLE_sourceAttrib          = 0;
-    static const uint32_t SWR_ATTRIB_SWIZZLE_constantSource        = 1;
-    static const uint32_t SWR_ATTRIB_SWIZZLE_componentOverrideMask = 2;
-
-    INLINE static StructType* Gen_SWR_BACKEND_STATE(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_BACKEND_STATE");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* constantInterpolationMask  */ Type::getInt32Ty(ctx),
-                /* pointSpriteTexCoordMask    */ Type::getInt32Ty(ctx),
-                /* swizzleEnable              */ Type::getInt8Ty(ctx),
-                /* numAttributes              */ Type::getInt8Ty(ctx),
-                /* numComponents              */ ArrayType::get(Type::getInt8Ty(ctx), 32),
-                /* readRenderTargetArrayIndex */ Type::getInt8Ty(ctx),
-                /* readViewportArrayIndex     */ Type::getInt8Ty(ctx),
-                /* cullDistanceMask           */ Type::getInt8Ty(ctx),
-                /* clipDistanceMask           */ Type::getInt8Ty(ctx),
-                /* pad                        */ ArrayType::get(Type::getInt8Ty(ctx), 10),
-                /* vertexAttribOffset         */ Type::getInt32Ty(ctx),
-                /* vertexClipCullOffset       */ Type::getInt32Ty(ctx),
-                /* swizzleMap                 */ ArrayType::get(Gen_SWR_ATTRIB_SWIZZLE(pJitMgr), 32),
-            };
-
-            pRetType = StructType::create(members, "SWR_BACKEND_STATE", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("constantInterpolationMask",  1128),
-                std::make_pair("pointSpriteTexCoordMask",    1130),
-                std::make_pair("swizzleEnable",              1133),
-                std::make_pair("numAttributes",              1136),
-                std::make_pair("numComponents",              1137),
-                std::make_pair("readRenderTargetArrayIndex", 1140),
-                std::make_pair("readViewportArrayIndex",     1142),
-                std::make_pair("cullDistanceMask",           1145),
-                std::make_pair("clipDistanceMask",           1146),
-                std::make_pair("pad",                        1150),
-                std::make_pair("vertexAttribOffset",         1153),
-                std::make_pair("vertexClipCullOffset",       1156),
-                std::make_pair("swizzleMap",                 1158),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_BACKEND_STATE", pFile, 1126, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_BACKEND_STATE_constantInterpolationMask  = 0;
-    static const uint32_t SWR_BACKEND_STATE_pointSpriteTexCoordMask    = 1;
-    static const uint32_t SWR_BACKEND_STATE_swizzleEnable              = 2;
-    static const uint32_t SWR_BACKEND_STATE_numAttributes              = 3;
-    static const uint32_t SWR_BACKEND_STATE_numComponents              = 4;
-    static const uint32_t SWR_BACKEND_STATE_readRenderTargetArrayIndex = 5;
-    static const uint32_t SWR_BACKEND_STATE_readViewportArrayIndex     = 6;
-    static const uint32_t SWR_BACKEND_STATE_cullDistanceMask           = 7;
-    static const uint32_t SWR_BACKEND_STATE_clipDistanceMask           = 8;
-    static const uint32_t SWR_BACKEND_STATE_pad                        = 9;
-    static const uint32_t SWR_BACKEND_STATE_vertexAttribOffset         = 10;
-    static const uint32_t SWR_BACKEND_STATE_vertexClipCullOffset       = 11;
-    static const uint32_t SWR_BACKEND_STATE_swizzleMap                 = 12;
-
-    INLINE static StructType* Gen_SWR_PS_STATE(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_PS_STATE");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* pfnPixelShader   */ PointerType::get(Type::getInt8Ty(ctx), 0),
-                /* killsPixel       */ Type::getInt32Ty(ctx),
-                /* inputCoverage    */ Type::getInt32Ty(ctx),
-                /* writesODepth     */ Type::getInt32Ty(ctx),
-                /* usesSourceDepth  */ Type::getInt32Ty(ctx),
-                /* shadingRate      */ Type::getInt32Ty(ctx),
-                /* posOffset        */ Type::getInt32Ty(ctx),
-                /* barycentricsMask */ Type::getInt32Ty(ctx),
-                /* usesUAV          */ Type::getInt32Ty(ctx),
-                /* forceEarlyZ      */ Type::getInt32Ty(ctx),
-                /* renderTargetMask */ Type::getInt8Ty(ctx),
-            };
-
-            pRetType = StructType::create(members, "SWR_PS_STATE", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("pfnPixelShader",   1233),
-                std::make_pair("killsPixel",       1236),
-                std::make_pair("inputCoverage",    1237),
-                std::make_pair("writesODepth",     1238),
-                std::make_pair("usesSourceDepth",  1239),
-                std::make_pair("shadingRate",      1240),
-                std::make_pair("posOffset",        1241),
-                std::make_pair("barycentricsMask", 1242),
-                std::make_pair("usesUAV",          1244),
-                std::make_pair("forceEarlyZ",      1245),
-                std::make_pair("renderTargetMask", 1247),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_PS_STATE", pFile, 1230, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_PS_STATE_pfnPixelShader   = 0;
-    static const uint32_t SWR_PS_STATE_killsPixel       = 1;
-    static const uint32_t SWR_PS_STATE_inputCoverage    = 2;
-    static const uint32_t SWR_PS_STATE_writesODepth     = 3;
-    static const uint32_t SWR_PS_STATE_usesSourceDepth  = 4;
-    static const uint32_t SWR_PS_STATE_shadingRate      = 5;
-    static const uint32_t SWR_PS_STATE_posOffset        = 6;
-    static const uint32_t SWR_PS_STATE_barycentricsMask = 7;
-    static const uint32_t SWR_PS_STATE_usesUAV          = 8;
-    static const uint32_t SWR_PS_STATE_forceEarlyZ      = 9;
-    static const uint32_t SWR_PS_STATE_renderTargetMask = 10;
-
-    INLINE static StructType* Gen_SWR_DEPTH_BOUNDS_STATE(JitManager* pJitMgr)
-    {
-        LLVMContext& ctx = pJitMgr->mContext;
-
-        StructType* pRetType = pJitMgr->mpCurrentModule->getTypeByName("SWR_DEPTH_BOUNDS_STATE");
-        if (pRetType == nullptr)
-        {
-            std::vector<Type*> members =
-            {
-                /* depthBoundsTestEnable   */ Type::getInt8Ty(ctx),
-                /* depthBoundsTestMinValue */ Type::getFloatTy(ctx),
-                /* depthBoundsTestMaxValue */ Type::getFloatTy(ctx),
-            };
-
-            pRetType = StructType::create(members, "SWR_DEPTH_BOUNDS_STATE", false);
-
-            // Compute debug metadata
-            llvm::DIBuilder builder(*pJitMgr->mpCurrentModule);
-            llvm::DIFile* pFile = builder.createFile("state.h", "rasterizer/core");
-
-            std::vector<std::pair<std::string, uint32_t>> dbgMembers =
-            {
-                std::make_pair("depthBoundsTestEnable",   1253),
-                std::make_pair("depthBoundsTestMinValue", 1254),
-                std::make_pair("depthBoundsTestMaxValue", 1255),
-            };
-            pJitMgr->CreateDebugStructType(pRetType, "SWR_DEPTH_BOUNDS_STATE", pFile, 1251, dbgMembers);
-        }
-
-        return pRetType;
-    }
-
-    static const uint32_t SWR_DEPTH_BOUNDS_STATE_depthBoundsTestEnable   = 0;
-    static const uint32_t SWR_DEPTH_BOUNDS_STATE_depthBoundsTestMinValue = 1;
-    static const uint32_t SWR_DEPTH_BOUNDS_STATE_depthBoundsTestMaxValue = 2;
-
-} // namespace SwrJit
-
-
-// clang-format on
